<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Saṃsāra</title>
<link>https://samsaara.github.io/index.html</link>
<atom:link href="https://samsaara.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>posts about data science, learning &amp; any other upcoming random stuff from Vivek Vaddina</description>
<image>
<url>https://samsaara.github.io/images/logo.png</url>
<title>Saṃsāra</title>
<link>https://samsaara.github.io/index.html</link>
<height>144</height>
<width>144</width>
</image>
<generator>quarto-1.2.280</generator>
<lastBuildDate>Mon, 19 Dec 2022 23:00:00 GMT</lastBuildDate>
<item>
  <title>Face mask detection with fastai</title>
  <link>https://samsaara.github.io/posts/face-mask-detection/facemask_detection.html</link>
  <description><![CDATA[ 




<p>With COVID-19 mutating and still posing a threat globally, wearing a 😷 is still mandatory in many countries. In this post, we will see how to train a simple computer vision model to detect whether the person is wearing a facemask or not. Let’s start by downloading the appropriate dataset<sup>1</sup> from kaggle.</p>
<p>You can either download it manually from kaggle or use <a href="https://www.kaggle.com/docs/api">its free API</a>. Let’s do the latter.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> fastai.imports <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
</div>
<p>Let’s create a directory called <code>data</code> to store and extract our desired dataset.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">data_dir <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'./data'</span>)</span>
<span id="cb2-2">data_dir.mkdir(parents<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'.'</span>)</span>
<span id="cb3-2">path.ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>(#3) [Path('mask.jpg'),Path('facemask_detection.ipynb'),Path('data')]</code></pre>
</div>
</div>
<section id="loading-dataset" class="level1">
<h1>Loading dataset</h1>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">import</span> kaggle</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">kaggle.api.dataset_download_files(<span class="st" style="color: #20794D;">'ashishjangra27/face-mask-12k-images-dataset'</span>, path<span class="op" style="color: #5E5E5E;">=</span>path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'data'</span>, unzip<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'data'</span>).ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>(#1) [Path('data/Face Mask Dataset')]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'data/Face Mask Dataset/'</span>).ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>(#3) [Path('data/Face Mask Dataset/Train'),Path('data/Face Mask Dataset/Validation'),Path('data/Face Mask Dataset/Test')]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'data/Face Mask Dataset/Train'</span>).ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>(#2) [Path('data/Face Mask Dataset/Train/WithoutMask'),Path('data/Face Mask Dataset/Train/WithMask')]</code></pre>
</div>
</div>
<p>We notice that there’re three folders neatly separated into different datasets with each folder in turn sectioned into images with/without masks. Let’s load them…</p>
</section>
<section id="checking-dataset" class="level1">
<h1>Checking dataset</h1>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">ims <span class="op" style="color: #5E5E5E;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'data/Face Mask Dataset/'</span>)</span>
<span id="cb14-2">ims</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>(#11792) [Path('data/Face Mask Dataset/Train/WithoutMask/1092.png'),Path('data/Face Mask Dataset/Train/WithoutMask/1460.png'),Path('data/Face Mask Dataset/Train/WithoutMask/3881.png'),Path('data/Face Mask Dataset/Train/WithoutMask/982.png'),Path('data/Face Mask Dataset/Train/WithoutMask/2662.png'),Path('data/Face Mask Dataset/Train/WithoutMask/4602.png'),Path('data/Face Mask Dataset/Train/WithoutMask/1106.png'),Path('data/Face Mask Dataset/Train/WithoutMask/5205.png'),Path('data/Face Mask Dataset/Train/WithoutMask/1776.png'),Path('data/Face Mask Dataset/Train/WithoutMask/4309.png')...]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="75">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">failed <span class="op" style="color: #5E5E5E;">=</span> verify_images(ims)</span>
<span id="cb16-2">failed</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="75">
<pre><code>(#0) []</code></pre>
</div>
</div>
<p>As we notice, there’re about <code>~12,000</code> images… and no invalid files. That’s good!</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">ims[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>Path('data/Face Mask Dataset/Train/WithoutMask/1092.png')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">im <span class="op" style="color: #5E5E5E;">=</span> load_image(ims[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb20-2">im</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">im.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>(108, 108)</code></pre>
</div>
</div>
<p>After testing a few more images, we can notice that many of them have dimensions below <code>128x128</code>. So, let’s use fastai’s <code>DataBlock</code> &amp; <code>dataloaders</code> to load these images. <code>DataBlock</code> allows us to construct datasets with a lot of flexibility at each step. We’ll see how:</p>
<div class="cell" data-execution_count="89">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">faces <span class="op" style="color: #5E5E5E;">=</span> DataBlock(</span>
<span id="cb23-2">    blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb23-3">    get_items<span class="op" style="color: #5E5E5E;">=</span>partial(get_image_files, folders<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Train'</span>, <span class="st" style="color: #20794D;">'Validation'</span>]),</span>
<span id="cb23-4">    get_y<span class="op" style="color: #5E5E5E;">=</span>parent_label,</span>
<span id="cb23-5">    splitter<span class="op" style="color: #5E5E5E;">=</span>GrandparentSplitter(train_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Train'</span>, valid_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Validation'</span>),</span>
<span id="cb23-6">    item_tfms<span class="op" style="color: #5E5E5E;">=</span>Resize(<span class="dv" style="color: #AD0000;">128</span>),</span>
<span id="cb23-7">)</span></code></pre></div>
</div>
<p>Let’s deconstruct what we did above:</p>
<ul>
<li><code>blocks</code> tell what kind of datablock we’re building… in this case, we want to do image classification. Hence, we load an image and assign a category to it.</li>
<li><code>get_items</code> tell how &amp; where to look for our files. Since, we’re dealing with images, we use <code>get_image_files</code>. We use <code>partial</code> (from <code>functools</code>) to fix the <em>folders</em> attribute as we don’t want to pick images from <em>test</em> set as well.</li>
<li><code>get_y</code> provides <em>label</em> for our classes. Each image should ideally be labelled <code>WithMask</code> or <code>WithoutMask</code>.</li>
<li><code>splitter</code> helps us split the dataset into <em>training &amp; validation</em> sets by separating images from <code>Train</code> &amp; <code>Validation</code> folders</li>
<li><code>item_tfms</code> are the transformations (or a set of operations) that we perform on each item (in this case, an image) before we bunch them together as a batch. In this case, we are resizing all images to <code>128x128</code>.</li>
</ul>
<p>Now, let’s provide the source path of the images to finally load them with <code>dataloaders</code>.</p>
<div class="cell" data-execution_count="90">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">dls <span class="op" style="color: #5E5E5E;">=</span> faces.dataloaders(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'data/Face Mask Dataset/'</span>, bs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="97">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">dls.train.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-18-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can check what classes our data falls under by looking at the <code>.c</code> attribute of our dataloaders object.</p>
<div class="cell" data-execution_count="154">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">dls.c</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="154">
<pre><code>2</code></pre>
</div>
</div>
<p>and <code>.vocab</code> attribute tells what those classes and their order is!</p>
<div class="cell" data-execution_count="155">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">dls.vocab</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="155">
<pre><code>['WithMask', 'WithoutMask']</code></pre>
</div>
</div>
<p>Looks good! Now let’s train a model… we can start with a simple one like <code>resnet18</code> and use a more complex one if needed. We track our model’s performance by monitoring its <code>accuracy</code>.</p>
</section>
<section id="training-a-model" class="level1">
<h1>Training a model</h1>
<div class="cell" data-execution_count="100">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;">import</span> warnings</span>
<span id="cb30-2">warnings.filterwarnings(<span class="st" style="color: #20794D;">'ignore'</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">learner <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;">=</span>accuracy)</span></code></pre></div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>if this is the first time you run the above command, it will download a pre-trained model onto the disk.</p>
</div>
</div>
<div class="cell" data-execution_count="106">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">learner.lr_find(suggest_funcs<span class="op" style="color: #5E5E5E;">=</span>(steep, minimum, valley))</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="106">
<pre><code>SuggestedLRs(steep=0.0003981071640737355, minimum=0.02089296132326126, valley=0.0008317637839354575)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-23-output-4.png" class="img-fluid"></p>
</div>
</div>
<p>using the builtin <em>learning rate</em> finder, it looks like a good value is <code>~5e-3</code>… let’s train the model with that for <code>3</code> epochs!</p>
<div class="cell" data-execution_count="107">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">learner.fine_tune(<span class="dv" style="color: #AD0000;">3</span>, <span class="fl" style="color: #AD0000;">5e-3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>accuracy</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.095269</td>
      <td>0.025470</td>
      <td>0.990000</td>
      <td>00:12</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>accuracy</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.028186</td>
      <td>0.016682</td>
      <td>0.996250</td>
      <td>00:16</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.011198</td>
      <td>0.006065</td>
      <td>0.997500</td>
      <td>00:15</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.002301</td>
      <td>0.001746</td>
      <td>0.998750</td>
      <td>00:15</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>Wow! a near <code>100%</code> accuracy! 🎉😍 <em>Fastai</em> always ensures that the metrics are reported on the validation dataset, so that’s a good sign. Let’s see what the model learnt!</p>
<div class="cell" data-execution_count="108">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">learner.show_results()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-25-output-3.png" class="img-fluid"></p>
</div>
</div>
<section id="verifying-results" class="level2">
<h2 class="anchored" data-anchor-id="verifying-results">verifying results</h2>
<div class="cell" data-execution_count="109">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">interp <span class="op" style="color: #5E5E5E;">=</span> ClassificationInterpretation.from_learner(learner)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
</div>
<div class="cell" data-execution_count="110">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">interp.plot_confusion_matrix()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-27-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>Let’s see what the model is getting wrong or is most unsure about by plotting its top losses!</p>
<div class="cell" data-execution_count="116">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">interp.plot_top_losses(<span class="dv" style="color: #AD0000;">4</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">8</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-28-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>We only got one incorrect image &amp; the rest are correct but a bit inconfident (and even that’s low for the 2<sup>nd</sup> row of images).</p>
<section id="image-shifting" class="level3">
<h3 class="anchored" data-anchor-id="image-shifting">Image Shifting</h3>
<p>Let’s do a bit of fun! Sometimes, it’s known that some image recognition models predict completely different classes when even a few pixels are changed… hence let’s see how robust our model is by rotating and wrapping an image and then letting our model predict.</p>
<div class="cell" data-execution_count="170">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="kw" style="color: #003B4F;">def</span> rotate_and_wrap_image(image, percentage<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">.4</span>):</span>
<span id="cb39-2">    im <span class="op" style="color: #5E5E5E;">=</span> tensor(image)</span>
<span id="cb39-3">    val <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(im.shape[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">*</span> percentage)</span>
<span id="cb39-4">    <span class="cf" style="color: #003B4F;">return</span> torch.cat((im[:, val:], im[:, :val]), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)    </span></code></pre></div>
</div>
<div class="cell" data-execution_count="171">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">im.resize((<span class="dv" style="color: #AD0000;">128</span>, <span class="dv" style="color: #AD0000;">128</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="171">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-30-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="173">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">show_image(rotate_and_wrap_image(im))<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-31-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="174">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">learner.predict(rotate_and_wrap_image(im))</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="174">
<pre><code>('WithoutMask', TensorBase(1), TensorBase([3.2003e-07, 1.0000e+00]))</code></pre>
</div>
</div>
<p>interesting! our model still predicts correct class and this worked on many other tested images as well. This might mean that the model has actually learnt to identify a 😷 and not ‘remember’ the image itself.</p>
</section>
</section>
</section>
<section id="predict-on-test-set" class="level1">
<h1>Predict on test set</h1>
<p>Let’s provide the test images to our model and see how well it predicts!</p>
<div class="cell" data-execution_count="177">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">test_ims <span class="op" style="color: #5E5E5E;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'data/Face Mask Dataset/'</span> , folders<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Test'</span>])</span>
<span id="cb44-2">test_ims</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="177">
<pre><code>(#992) [Path('data/Face Mask Dataset/Test/WithoutMask/1940.png'),Path('data/Face Mask Dataset/Test/WithoutMask/1969.png'),Path('data/Face Mask Dataset/Test/WithoutMask/45.png'),Path('data/Face Mask Dataset/Test/WithoutMask/2497.png'),Path('data/Face Mask Dataset/Test/WithoutMask/807.png'),Path('data/Face Mask Dataset/Test/WithoutMask/3830.png'),Path('data/Face Mask Dataset/Test/WithoutMask/972.png'),Path('data/Face Mask Dataset/Test/WithoutMask/3825.png'),Path('data/Face Mask Dataset/Test/WithoutMask/4024.png'),Path('data/Face Mask Dataset/Test/WithoutMask/4178.png')...]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="178">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">test_dl <span class="op" style="color: #5E5E5E;">=</span> learner.dls.test_dl(test_ims)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="184">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">preds, _ <span class="op" style="color: #5E5E5E;">=</span> learner.get_preds(dl<span class="op" style="color: #5E5E5E;">=</span>test_dl)</span>
<span id="cb47-2">preds.shape</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="184">
<pre><code>torch.Size([992, 2])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="213">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">preds[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="213">
<pre><code>TensorBase([[4.3606e-05, 9.9996e-01],
            [3.7663e-07, 1.0000e+00],
            [2.5526e-06, 1.0000e+00],
            [3.0737e-10, 1.0000e+00],
            [1.1245e-08, 1.0000e+00]])</code></pre>
</div>
</div>
<p>We got probabilities… we need to somehow use them to compare with the actual labels. First, let’s get the actual labels.</p>
<p>We know from the <code>.vocab</code> attribute that class <em>0</em> with <code>WithMask</code> and <em>1</em> is <code>WithoutMask</code>. So let’s extract the label from each test image based on which folder it’s coming from.</p>
<div class="cell" data-execution_count="214">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">test_ims[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="214">
<pre><code>Path('data/Face Mask Dataset/Test/WithoutMask/1940.png')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="220">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">test_ims[<span class="dv" style="color: #AD0000;">0</span>].parent</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="220">
<pre><code>Path('data/Face Mask Dataset/Test/WithoutMask')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="221">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">test_ims[<span class="dv" style="color: #AD0000;">0</span>].parent.stem</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="221">
<pre><code>'WithoutMask'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="207">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">targets <span class="op" style="color: #5E5E5E;">=</span> test_ims.<span class="bu" style="color: null;">map</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">*</span> (x.parent.stem <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'WithoutMask'</span>))</span>
<span id="cb57-2">targets</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="207">
<pre><code>(#992) [1,1,1,1,1,1,1,1,1,1...]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="209">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">preds.argmax(<span class="dv" style="color: #AD0000;">1</span>).shape, <span class="bu" style="color: null;">len</span>(targets)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="209">
<pre><code>(torch.Size([992]), 992)</code></pre>
</div>
</div>
<p>Now we compare our predictions with the targets and take the average like so:</p>
<div class="cell" data-execution_count="212">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">(preds.argmax(<span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">==</span> tensor(targets)).<span class="bu" style="color: null;">float</span>().mean()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="212">
<pre><code>TensorBase(0.9990)</code></pre>
</div>
</div>
<p>Sweet! 💗</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>We now know how to train a simple computer vision model to detect facemasks! However, we can’t completely generalize and say that our model can be used in the actual real world! There are pitfalls and it is always important to understand the limitations of our models.</p>
<p>Always look at where the data is coming from. In this case, it is a bunch of google images and celebrity faces. All the images are cropped around the face. So our model might not predict well when given an unclipped full image of a person with/without a mask. It would still predict one of the two classes even when we submit a completely different image, say a 🦒. Also the image quality it was trained on is around <code>128x128</code> pixels, which is rather low.</p>
<p>We will possibly see how to address these issues in another post covering another dataset! Until then, 👋</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>https://www.kaggle.com/datasets/ashishjangra27/face-mask-12k-images-dataset↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>EDA</category>
  <category>computer vision</category>
  <category>fastai</category>
  <guid>https://samsaara.github.io/posts/face-mask-detection/facemask_detection.html</guid>
  <pubDate>Mon, 19 Dec 2022 23:00:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/face-mask-detection/mask.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>fastai env setup</title>
  <link>https://samsaara.github.io/posts/fastai-env-setup/index.html</link>
  <description><![CDATA[ 




<p>It’s been quite a while since I last dabbled myself in deep learning and therefore decided to revisit from the basics. And what better way than to start doing that than learning from <a href="https://course.fast.ai/">fastai</a>? :D In this post, we will see how to quickly setup your dev environment for running notebooks locally to put your hard earned GPUs to use :p</p>
<p>Of course, you can run your notebooks on cloud with free GPU support on platforms such as <em><a href="https://colab.research.google.com/">Google Colab</a></em>, <em><a href="https://www.paperspace.com/gradient/notebooks">Paperspace Gradient</a></em> or even <em><a href="https://www.kaggle.com/docs/notebooks">kaggle notebooks</a></em> but sometimes, it feels good to run things locally without worrying too much about quotas or network issues etc. If you’re starting new in this field, it’s highly recommended to try the above platforms first.</p>
<p>Firstly, you need <a href="https://anaconda.org/conda-forge/mamba">mamba</a>. Use it wherever you use <code>conda</code> because it’s much faster. Once you install it, run the following script:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># create a conda environment</span></span>
<span id="cb1-3"><span class="ex" style="color: null;">mamba</span> create <span class="at" style="color: #657422;">-n</span> fastai python=3.10</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># install suitable version of `pyroch-cuda` at your time of installation</span></span>
<span id="cb1-6"><span class="ex" style="color: null;">mamba</span> install pytorch torchvision torchaudio pytorch-cuda=11.7 <span class="at" style="color: #657422;">-c</span> pytorch <span class="at" style="color: #657422;">-c</span> nvidia</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># install fastai</span></span>
<span id="cb1-9"><span class="ex" style="color: null;">mamba</span> install <span class="at" style="color: #657422;">-c</span> fastchan fastai</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="ex" style="color: null;">mamba</span> install <span class="at" style="color: #657422;">-c</span> conda-forge jupyterlab ipywidgets</span></code></pre></div>
<p>Make sure you can use GPU with pytorch by running this in your python session:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;">assert</span> torch.cuda.is_available()</span></code></pre></div>
<p>That’s it. Now you can run notebooks with GPU support locally simply by doing <code>mamba activate fastai</code> and launching <em>jupyter</em> ! 💚</p>



 ]]></description>
  <category>code</category>
  <category>setup</category>
  <guid>https://samsaara.github.io/posts/fastai-env-setup/index.html</guid>
  <pubDate>Sun, 18 Dec 2022 23:00:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/fastai-env-setup/dev_setup.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Migrating from Fastpages to Quarto</title>
  <link>https://samsaara.github.io/posts/migrate-to-quarto/index.html</link>
  <description><![CDATA[ 




<p><a href="https://fastpages.fast.ai">Fastpages</a>, based on which my original blog was <a href="../../posts/fastpages-blog-setup/fastpages-blog-setup.html">setup</a> has been archived and they now recommend using <a href="https://quarto.org">Quarto</a> instead. If you’re starting new, the latter is the recommended way to go but if you too have a fastpages blog setup initially and want to migrate, there’s a <a href="https://nbdev.fast.ai/tutorials/blogging.html#migrating-from-fastpages">migration guide</a> available. It’s not completely perfect as you have to tweak a few bits here &amp; there before you see all the renderings correctly (because of slight syntactic variations amongst other things).</p>
<p>However, I felt quarto to be much more intuitive and easy to setup. I also did the migration but found manually moving posts from my old blog repo to the new quarto repo to be a bit easier. (Migration worked but I was not happy with the directories it created as part of it… I found it aesthetically less pleasing and hence moved them myself).</p>
<p>For simple blogging, fastpages offered more than enough features and quarto offers even more on top of that. It’s easy to get started with quarto. Head over to the <a href="https://quarto.org/docs/guide/">start guide</a> to learn more.</p>
<p>I do miss the advanced styling options I setup in <em>fastpages</em> though… will have to dig into Quarto to see how much I can reuse. Until then, have fun with my frugalistic looking blog! :D</p>



 ]]></description>
  <category>meta</category>
  <guid>https://samsaara.github.io/posts/migrate-to-quarto/index.html</guid>
  <pubDate>Sat, 17 Dec 2022 23:00:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/migrate-to-quarto/data-migration.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Supercharge your data processing with DuckDB</title>
  <link>https://samsaara.github.io/posts/duckdb-tutorial/duckdb-tutorial.html</link>
  <description><![CDATA[ 




<p>Do you have large datasets that you simply can not load into memory to analyse with Pandas? Or do you feel more comfortable expressing operations in SQL instead of python?</p>
<p>Fret not, for you have <code>DuckDB</code> now! ✨🦆✨</p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Most of us data scientists are familiar with Pandas, the de-facto data processing library in Python. It’s simple, powerful, able to handle a myriad data formats &amp; sizes and for the most part, very intuitive. And people familiar with SQL as well know how powerful it too is in its ability to handle complex data transformations with a concise syntax. But sometimes, you have to trade off execution speeds in favor of intuitivity/expressiveness or vice versa. This especially becomes painful when you either have large (OOM) datasets or need to perform complex data wrangling on your data. At times, it makes more sense to handle that in SQL rather than in Pandas.</p>
<p>DuckDB aims to bring these together with a fast &amp; efficient SQL query execution engine that can run complex queries on large sets of data. It integrates tightly with Pandas DataFrames and allows us to run these queries directly on top of them without needing to take data in &amp; out of it.</p>
<p>In this tutorial, we shall see how we can leverage DuckDB in various analytical workloads.</p>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>DuckDB is very lightweight and has <strong><em>no external dependencies</em></strong> and runs <em>within</em> the host process itself. Simply install it with:</p>
<pre><code>pip install duckdb==0.3.4</code></pre>
<p>To initialize it, run:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:33:34.991241Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:34.436037Z&quot;}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> duckdb</span>
<span id="cb2-2">dbcon <span class="op" style="color: #5E5E5E;">=</span> duckdb.<span class="ex" style="color: null;">connect</span>()</span></code></pre></div>
</div>
<p>That’s it! Now you can test it by running:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:33:36.016219Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:35.992090Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">dbcon.execute(<span class="st" style="color: #20794D;">'select 1, 2, 3'</span>).fetchall()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>[(1, 2, 3)]</code></pre>
</div>
</div>
<p>Next step is to run <code>pip install pyarrow</code> to add support for reading/writing <em>parquet</em> data.</p>
<section id="jupyter-notebook-setup" class="level3">
<h3 class="anchored" data-anchor-id="jupyter-notebook-setup">Jupyter Notebook setup</h3>
<p>If in case you wish to explore it in Jupyter Notebooks, install a few additional libraries for a better experience:</p>
<pre><code>pip install ipython-sql SQLAlchemy duckdb-engine</code></pre>
<p>Import them once installed:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:33:40.106943Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:36.943288Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb6-2"><span class="im" style="color: #00769E;">import</span> sqlalchemy</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;">%</span>load_ext sql</span></code></pre></div>
</div>
<p>Set a few config options to prettify the output and return it as Pandas DataFrame</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:33:40.130019Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:40.109333Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="op" style="color: #5E5E5E;">%</span>config SqlMagic.autopandas <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;">%</span>config SqlMagic.feedback <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb7-3"><span class="op" style="color: #5E5E5E;">%</span>config SqlMagic.displaycon <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
</div>
<p>DuckDB is primarily designed to be an in-memory DB. You can however persist your data to disk.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:33:40.405754Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:40.132674Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;">%</span>sql duckdb:<span class="op" style="color: #5E5E5E;">///</span>:memory:</span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;"># %sql duckdb:///path/to/file.db</span></span></code></pre></div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:33:41.343052Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:41.318366Z&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;">#collapse-output</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;"># we can also access the current config &amp; settings of DuckDB by running the following:</span></span>
<span id="cb9-4"><span class="op" style="color: #5E5E5E;">%</span>sql SELECT <span class="op" style="color: #5E5E5E;">*</span> FROM duckdb_settings()<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>name</th>
      <th>value</th>
      <th>description</th>
      <th>input_type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>access_mode</td>
      <td>automatic</td>
      <td>Access mode of the database (AUTOMATIC, READ_O...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>1</th>
      <td>checkpoint_threshold</td>
      <td>16.7MB</td>
      <td>The WAL size threshold at which to automatical...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>2</th>
      <td>debug_checkpoint_abort</td>
      <td>NULL</td>
      <td>DEBUG SETTING: trigger an abort while checkpoi...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>3</th>
      <td>debug_force_external</td>
      <td>False</td>
      <td>DEBUG SETTING: force out-of-core computation f...</td>
      <td>BOOLEAN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>debug_many_free_list_blocks</td>
      <td>False</td>
      <td>DEBUG SETTING: add additional blocks to the fr...</td>
      <td>BOOLEAN</td>
    </tr>
    <tr>
      <th>5</th>
      <td>debug_window_mode</td>
      <td>NULL</td>
      <td>DEBUG SETTING: switch window mode to use</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>6</th>
      <td>default_collation</td>
      <td></td>
      <td>The collation setting used when none is specified</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>7</th>
      <td>default_order</td>
      <td>asc</td>
      <td>The order type used when none is specified (AS...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>8</th>
      <td>default_null_order</td>
      <td>nulls_first</td>
      <td>Null ordering used when none is specified (NUL...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>9</th>
      <td>disabled_optimizers</td>
      <td></td>
      <td>DEBUG SETTING: disable a specific set of optim...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>10</th>
      <td>enable_external_access</td>
      <td>True</td>
      <td>Allow the database to access external state (t...</td>
      <td>BOOLEAN</td>
    </tr>
    <tr>
      <th>11</th>
      <td>enable_object_cache</td>
      <td>False</td>
      <td>Whether or not object cache is used to cache e...</td>
      <td>BOOLEAN</td>
    </tr>
    <tr>
      <th>12</th>
      <td>enable_profiling</td>
      <td>NULL</td>
      <td>Enables profiling, and sets the output format ...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>13</th>
      <td>enable_progress_bar</td>
      <td>False</td>
      <td>Enables the progress bar, printing progress to...</td>
      <td>BOOLEAN</td>
    </tr>
    <tr>
      <th>14</th>
      <td>explain_output</td>
      <td>physical_only</td>
      <td>Output of EXPLAIN statements (ALL, OPTIMIZED_O...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>15</th>
      <td>force_compression</td>
      <td>NULL</td>
      <td>DEBUG SETTING: forces a specific compression m...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>16</th>
      <td>log_query_path</td>
      <td>NULL</td>
      <td>Specifies the path to which queries should be ...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>17</th>
      <td>max_memory</td>
      <td>26.9GB</td>
      <td>The maximum memory of the system (e.g. 1GB)</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>18</th>
      <td>memory_limit</td>
      <td>26.9GB</td>
      <td>The maximum memory of the system (e.g. 1GB)</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>19</th>
      <td>null_order</td>
      <td>nulls_first</td>
      <td>Null ordering used when none is specified (NUL...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>20</th>
      <td>perfect_ht_threshold</td>
      <td>12</td>
      <td>Threshold in bytes for when to use a perfect h...</td>
      <td>BIGINT</td>
    </tr>
    <tr>
      <th>21</th>
      <td>preserve_identifier_case</td>
      <td>True</td>
      <td>Whether or not to preserve the identifier case...</td>
      <td>BOOLEAN</td>
    </tr>
    <tr>
      <th>22</th>
      <td>profiler_history_size</td>
      <td>NULL</td>
      <td>Sets the profiler history size</td>
      <td>BIGINT</td>
    </tr>
    <tr>
      <th>23</th>
      <td>profile_output</td>
      <td></td>
      <td>The file to which profile output should be sav...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>24</th>
      <td>profiling_mode</td>
      <td>NULL</td>
      <td>The profiling mode (STANDARD or DETAILED)</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>25</th>
      <td>profiling_output</td>
      <td></td>
      <td>The file to which profile output should be sav...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>26</th>
      <td>progress_bar_time</td>
      <td>2000</td>
      <td>Sets the time (in milliseconds) how long a que...</td>
      <td>BIGINT</td>
    </tr>
    <tr>
      <th>27</th>
      <td>schema</td>
      <td></td>
      <td>Sets the default search schema. Equivalent to ...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>28</th>
      <td>search_path</td>
      <td></td>
      <td>Sets the default search search path as a comma...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>29</th>
      <td>temp_directory</td>
      <td>.tmp</td>
      <td>Set the directory to which to write temp files</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>30</th>
      <td>threads</td>
      <td>12</td>
      <td>The number of total threads used by the system.</td>
      <td>BIGINT</td>
    </tr>
    <tr>
      <th>31</th>
      <td>wal_autocheckpoint</td>
      <td>16.7MB</td>
      <td>The WAL size threshold at which to automatical...</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>32</th>
      <td>worker_threads</td>
      <td>12</td>
      <td>The number of total threads used by the system.</td>
      <td>BIGINT</td>
    </tr>
    <tr>
      <th>33</th>
      <td>binary_as_string</td>
      <td></td>
      <td>In Parquet files, interpret binary data as a s...</td>
      <td>BOOLEAN</td>
    </tr>
    <tr>
      <th>34</th>
      <td>Calendar</td>
      <td>gregorian</td>
      <td>The current calendar</td>
      <td>VARCHAR</td>
    </tr>
    <tr>
      <th>35</th>
      <td>TimeZone</td>
      <td>Europe/Berlin</td>
      <td>The current time zone</td>
      <td>VARCHAR</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>From now on, you can run SQL directly by prefixing <code>%sql</code> (or <code>%%sql</code> for multiline statements) to your code cell and get your output returned as pandas dataframe :man_dancing:.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:33:43.949965Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:43.936516Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="op" style="color: #5E5E5E;">%</span>sql select <span class="dv" style="color: #AD0000;">1</span> <span class="im" style="color: #00769E;">as</span> a<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>a</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
</section>
<section id="duckdb-vs-traditional-databases" class="level2">
<h2 class="anchored" data-anchor-id="duckdb-vs-traditional-databases">DuckDB vs traditional Databases</h2>
<p>With <code>pandas.read_sql</code> command, one can already run SQL queries on an existing DB connection, read tables and load data as pandas DataFrames in memory for processing in python. While this is fine for lightweight operations, it is not optimized for heavy data processing. Traditional RDBMSs such as Postgres, MySQL, etc. process each row sequentially which apart from taking long time to execute, also induce a lot of overhead on CPU. DuckDB on the other hand is built with <a href="https://en.wikipedia.org/wiki/Online_analytical_processing">OLAP</a> in mind and is <em>Column-Vectorized</em>. This helps massively parallelize disk I/O and query executions.</p>
<blockquote class="blockquote">
<p>DuckDB uses the Postgres SQL parser under the hood, and offers many of the same SQL features as Postgres <sup>1</sup></p>
</blockquote>
</section>
</section>
<section id="accessing-dataframes-with-duckdb" class="level1">
<h1>Accessing DataFrames with DuckDB</h1>
<p>One of the major limitations of Pandas is that it’s <em>single threaded</em>. Hence we can’t take advantage of the multi-core CPUs which every computer ships with these days. DuckDB <strong><em>supports multi-threading</em></strong> natively and hence can take advantage of all the cores of your CPU.</p>
<blockquote class="blockquote">
<p>There exist a few some external libraries that enable parallel processing but only on specific operations.</p>
</blockquote>
<p>While this is turned on by default, we also can explicitly set the number of threads:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:33:45.545681Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:45.487404Z&quot;}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;">#collapse-output</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;"># specify no. of threads for multi-threading support</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;"># dbcon.execute("PRAGMA threads=32");</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;"># you can also set this up with the `%sql` line magic</span></span>
<span id="cb11-7"><span class="op" style="color: #5E5E5E;">%</span>sql SET THREADS to <span class="dv" style="color: #AD0000;">32</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table>
</div>
</div>
</div>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>When using free tier of Google Colab, please set it only to <code>2</code> to avoid crashing the kernel instead.</p>
</div>
</div>
<p>We can also write a short snippet to run an SQL query, and return the result as a Pandas DataFrame in a pythonic way:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:33:48.373995Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:48.367971Z&quot;}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;">def</span> dbrun(query: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb12-2">    <span class="co" style="color: #5E5E5E;">"""run the query with duckdb"""</span></span>
<span id="cb12-3"></span>
<span id="cb12-4">    result <span class="op" style="color: #5E5E5E;">=</span> dbcon.query(query).to_df()</span>
<span id="cb12-5"></span>
<span id="cb12-6">    <span class="co" style="color: #5E5E5E;"># you can also use `fetch` instead</span></span>
<span id="cb12-7">    <span class="co" style="color: #5E5E5E;"># result = dbcon.execute(query).fetch_df()</span></span>
<span id="cb12-8"></span>
<span id="cb12-9">    <span class="co" style="color: #5E5E5E;"># or just simply `.df()`</span></span>
<span id="cb12-10">    <span class="co" style="color: #5E5E5E;"># result = dbcon.execute(query).df()</span></span>
<span id="cb12-11"></span>
<span id="cb12-12">    <span class="cf" style="color: #003B4F;">return</span> result</span></code></pre></div>
</div>
<p>Now create a DataFrame &amp; run a simple query:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:33:48.708828Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:48.647014Z&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(<span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>), columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'a'</span>])</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;"># querying with python function</span></span>
<span id="cb13-4">first_half_df <span class="op" style="color: #5E5E5E;">=</span> dbrun(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb13-5"><span class="st" style="color: #20794D;">    SELECT *</span></span>
<span id="cb13-6"><span class="st" style="color: #20794D;">    FROM df</span></span>
<span id="cb13-7"><span class="st" style="color: #20794D;">    WHERE a &lt; 5</span></span>
<span id="cb13-8"><span class="st" style="color: #20794D;">"""</span>)</span></code></pre></div>
</div>
<p>Alternatively, you can also compute the result with the line magics and store the result as a python variable that you can access elsewhere:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:33:55.512332Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:55.481003Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">#collapse-output</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="op" style="color: #5E5E5E;">%%</span>sql</span>
<span id="cb14-4"></span>
<span id="cb14-5">second_half_df <span class="op" style="color: #5E5E5E;">&lt;&lt;</span> </span>
<span id="cb14-6">SELECT <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb14-7">FROM df</span>
<span id="cb14-8">WHERE a <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Returning data to local variable second_half_df</code></pre>
</div>
</div>
<p>Notice that we didn’t declare <code>df</code> as a view, nor did we create any table. DuckDB simply looks for any python variable that was declared before if the table name doesn’t exist.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Sometimes, you override a dataframe by performing an operation &amp; assign it to the same variable. For e.g., <code>df = df.query(...)</code>. If in case, you see that the duckdb’s <code>df</code> is still not updated, you can (always) ‘register’ the dataframe explicitly as <code>dbcon.register("df", df);</code></p>
</div>
</div>
</section>
<section id="accessing-files-with-duckdb" class="level1">
<h1>Accessing files with DuckDB</h1>
<p>Often times we have data stored either in DB or in <code>parquet/csv</code> formats and they could be huge or may not/barely fit in memory. Loading them with pandas incur significant memory overhead and also possibly <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/scale.html">creates multiple copies</a> when performing certain operations. With DuckDB, such files can be queried directly without any copying because of <a href="https://arrow.apache.org/blog/2021/12/03/arrow-duckdb/">direct integration with Apache Arrow</a>.</p>
<p>To demonstrate this, we’ll download an <a href="https://www.kaggle.com/datasets/yuanyuwendymu/airline-delay-and-cancellation-data-2009-2018">airline delay &amp; cancelation dataset from kaggle</a> (and place it under <code>data/airline_data/</code> folder). The compressed archive is about <code>~2GB</code> and when deflated, creates a couple of CSVs totalling <code>~8GB</code> of data.</p>
<p>Let’s have a quick look at the contents by loading a single csv file:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:34:01.175371Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:34:00.924914Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="op" style="color: #5E5E5E;">%%</span>sql</span>
<span id="cb16-2"></span>
<span id="cb16-3">select <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb16-4"><span class="im" style="color: #00769E;">from</span> <span class="st" style="color: #20794D;">'./data/airline_data/2009.csv'</span></span>
<span id="cb16-5">limit <span class="dv" style="color: #AD0000;">5</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>FL_DATE</th>
      <th>OP_CARRIER</th>
      <th>OP_CARRIER_FL_NUM</th>
      <th>ORIGIN</th>
      <th>DEST</th>
      <th>CRS_DEP_TIME</th>
      <th>DEP_TIME</th>
      <th>DEP_DELAY</th>
      <th>TAXI_OUT</th>
      <th>WHEELS_OFF</th>
      <th>...</th>
      <th>CRS_ELAPSED_TIME</th>
      <th>ACTUAL_ELAPSED_TIME</th>
      <th>AIR_TIME</th>
      <th>DISTANCE</th>
      <th>CARRIER_DELAY</th>
      <th>WEATHER_DELAY</th>
      <th>NAS_DELAY</th>
      <th>SECURITY_DELAY</th>
      <th>LATE_AIRCRAFT_DELAY</th>
      <th>Unnamed: 27</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2009-01-01</td>
      <td>XE</td>
      <td>1204</td>
      <td>DCA</td>
      <td>EWR</td>
      <td>1100</td>
      <td>1058.0</td>
      <td>-2.0</td>
      <td>18.0</td>
      <td>1116.0</td>
      <td>...</td>
      <td>62.0</td>
      <td>68.0</td>
      <td>42.0</td>
      <td>199.0</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2009-01-01</td>
      <td>XE</td>
      <td>1206</td>
      <td>EWR</td>
      <td>IAD</td>
      <td>1510</td>
      <td>1509.0</td>
      <td>-1.0</td>
      <td>28.0</td>
      <td>1537.0</td>
      <td>...</td>
      <td>82.0</td>
      <td>75.0</td>
      <td>43.0</td>
      <td>213.0</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2009-01-01</td>
      <td>XE</td>
      <td>1207</td>
      <td>EWR</td>
      <td>DCA</td>
      <td>1100</td>
      <td>1059.0</td>
      <td>-1.0</td>
      <td>20.0</td>
      <td>1119.0</td>
      <td>...</td>
      <td>70.0</td>
      <td>62.0</td>
      <td>36.0</td>
      <td>199.0</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2009-01-01</td>
      <td>XE</td>
      <td>1208</td>
      <td>DCA</td>
      <td>EWR</td>
      <td>1240</td>
      <td>1249.0</td>
      <td>9.0</td>
      <td>10.0</td>
      <td>1259.0</td>
      <td>...</td>
      <td>77.0</td>
      <td>56.0</td>
      <td>37.0</td>
      <td>199.0</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2009-01-01</td>
      <td>XE</td>
      <td>1209</td>
      <td>IAD</td>
      <td>EWR</td>
      <td>1715</td>
      <td>1705.0</td>
      <td>-10.0</td>
      <td>24.0</td>
      <td>1729.0</td>
      <td>...</td>
      <td>105.0</td>
      <td>77.0</td>
      <td>40.0</td>
      <td>213.0</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 28 columns</p>
</div>
</div>
</div>
<p>we can load efficiently with pandas too by specifying the <code>nrows</code> parameter:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:34:05.133414Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:34:05.097132Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">pd.read_csv(<span class="st" style="color: #20794D;">'./data/airline_data/2009.csv'</span>, nrows<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>FL_DATE</th>
      <th>OP_CARRIER</th>
      <th>OP_CARRIER_FL_NUM</th>
      <th>ORIGIN</th>
      <th>DEST</th>
      <th>CRS_DEP_TIME</th>
      <th>DEP_TIME</th>
      <th>DEP_DELAY</th>
      <th>TAXI_OUT</th>
      <th>WHEELS_OFF</th>
      <th>...</th>
      <th>CRS_ELAPSED_TIME</th>
      <th>ACTUAL_ELAPSED_TIME</th>
      <th>AIR_TIME</th>
      <th>DISTANCE</th>
      <th>CARRIER_DELAY</th>
      <th>WEATHER_DELAY</th>
      <th>NAS_DELAY</th>
      <th>SECURITY_DELAY</th>
      <th>LATE_AIRCRAFT_DELAY</th>
      <th>Unnamed: 27</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2009-01-01</td>
      <td>XE</td>
      <td>1204</td>
      <td>DCA</td>
      <td>EWR</td>
      <td>1100</td>
      <td>1058.0</td>
      <td>-2.0</td>
      <td>18.0</td>
      <td>1116.0</td>
      <td>...</td>
      <td>62.0</td>
      <td>68.0</td>
      <td>42.0</td>
      <td>199.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2009-01-01</td>
      <td>XE</td>
      <td>1206</td>
      <td>EWR</td>
      <td>IAD</td>
      <td>1510</td>
      <td>1509.0</td>
      <td>-1.0</td>
      <td>28.0</td>
      <td>1537.0</td>
      <td>...</td>
      <td>82.0</td>
      <td>75.0</td>
      <td>43.0</td>
      <td>213.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2009-01-01</td>
      <td>XE</td>
      <td>1207</td>
      <td>EWR</td>
      <td>DCA</td>
      <td>1100</td>
      <td>1059.0</td>
      <td>-1.0</td>
      <td>20.0</td>
      <td>1119.0</td>
      <td>...</td>
      <td>70.0</td>
      <td>62.0</td>
      <td>36.0</td>
      <td>199.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2009-01-01</td>
      <td>XE</td>
      <td>1208</td>
      <td>DCA</td>
      <td>EWR</td>
      <td>1240</td>
      <td>1249.0</td>
      <td>9.0</td>
      <td>10.0</td>
      <td>1259.0</td>
      <td>...</td>
      <td>77.0</td>
      <td>56.0</td>
      <td>37.0</td>
      <td>199.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2009-01-01</td>
      <td>XE</td>
      <td>1209</td>
      <td>IAD</td>
      <td>EWR</td>
      <td>1715</td>
      <td>1705.0</td>
      <td>-10.0</td>
      <td>24.0</td>
      <td>1729.0</td>
      <td>...</td>
      <td>105.0</td>
      <td>77.0</td>
      <td>40.0</td>
      <td>213.0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 28 columns</p>
</div>
</div>
</div>
<p>While the first operation with DuckDB took <code>~250ms</code>, the second one above took only <code>~50ms</code>. It’s possibly because such operations are optimized in pandas and also for computing simple metrics across rows (such as mean, min, max etc.), pandas can make use of highly optimized numpy routines under the hood. But, as we’ll see later, these would only go so far.</p>
<p>To load all these CSVs into one dataframe with pandas is very inefficient and takes a lot of time. And it’ll most likely fail if your computer doesn’t have a beefy RAM. If you still gotta do it, you’d have to iterate through all CSVs and concatenate like so:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">from</span> glob <span class="im" style="color: #00769E;">import</span> glob</span>
<span id="cb18-2">csvs <span class="op" style="color: #5E5E5E;">=</span> glob(<span class="st" style="color: #20794D;">'data/airline_data/*.csv'</span>)</span>
<span id="cb18-3">df <span class="op" style="color: #5E5E5E;">=</span> pd.concat(pd.read_csv(csv) <span class="cf" style="color: #003B4F;">for</span> csv <span class="kw" style="color: #003B4F;">in</span> csvs)</span></code></pre></div>
<p>A better alternative would be to merge all those CSVs into a single parquet file. Unlike CSVs, parquet files are structured and as such are unambiguous to read.<sup>2</sup> They are compressed columnar files and hence take much less space than individual CSVs combined because of the efficient Arrow data format.</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="op" style="color: #5E5E5E;">%</span>sql copy <span class="st" style="color: #20794D;">'data/airline_data/*.csv'</span> to <span class="st" style="color: #20794D;">'data/airline_data/data.parquet'</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Count</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>61556964</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Notice that we directly copied all the CSVs using regex to a single parquet file without ever copying data into pandas. Now, we ended up from a 7.5GB combined CSV files to a 2.5GB parquet file which now easily fits into memory. So we can load it with pandas as:</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:34:38.545606Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:34:17.672753Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;">'data/airline_data/data.parquet'</span>)</span>
<span id="cb20-2">df.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>(61556964, 28)</code></pre>
</div>
</div>
<p>Because of the efficient parquet format, we could load the entire <em>61 Million</em> rows of data in mere seconds.</p>
<section id="projection-filter-pushdowns" class="level2">
<h2 class="anchored" data-anchor-id="projection-filter-pushdowns">Projection &amp; Filter Pushdowns</h2>
<p>Now let’s do a simple filter operation on our dataset. Let’s count the total number of rows that satisfy the condition <code>TAXI_OUT &gt; 10</code>. We’ll try with both pandas &amp; duckdb.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:34:54.249748Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:34:44.719959Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">df[df[<span class="st" style="color: #20794D;">'TAXI_OUT'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>(45209245, 28)</code></pre>
</div>
</div>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:34:54.499992Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:34:54.252243Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="op" style="color: #5E5E5E;">%%</span>sql</span>
<span id="cb24-2"></span>
<span id="cb24-3">select count(<span class="op" style="color: #5E5E5E;">*</span>) <span class="im" style="color: #00769E;">as</span> count</span>
<span id="cb24-4"><span class="im" style="color: #00769E;">from</span> df</span>
<span id="cb24-5">where TAXI_OUT <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>count</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>45209245</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>While the earlier operation took <code>~9.5s</code>, the latter just took <strong>~250ms</strong> :zap:. <em>There’s just no comparison.</em></p>
<p>This is because duckdb automatically optimizes the query by selecting only the required column(s) (aka <code>projection pushdown</code>) and then applies the filtering to get a subset of data (aka <code>filter pushdown</code>). Pandas instead reads through all the columns. We can optimize this in pandas by doing these pushdowns ourselves.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:35:13.066902Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:35:12.209341Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">projection_pushdown_df <span class="op" style="color: #5E5E5E;">=</span> df[[<span class="st" style="color: #20794D;">'TAXI_OUT'</span>]]</span>
<span id="cb25-2">filter_pushdown_df <span class="op" style="color: #5E5E5E;">=</span> projection_pushdown_df[projection_pushdown_df[<span class="st" style="color: #20794D;">'TAXI_OUT'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>]</span>
<span id="cb25-3">filter_pushdown_df.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>(45209245, 1)</code></pre>
</div>
</div>
<p>We managed to bring this down from several seconds to almost a second. But using duckdb is still about <code>70-90%</code> faster than this.</p>
</section>
<section id="using-groupby" class="level2">
<h2 class="anchored" data-anchor-id="using-groupby">Using Groupby</h2>
<p>Now let’s calculate a few aggregates using <code>groupby</code> with projection &amp; filter pushdowns combined.</p>
<p>Here, we compute a few simple metrics with a certain airline carrier grouped by two origin &amp; destination airports and finally sort the results by the origin airport.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:45:43.525554Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:45:36.613608Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">projection_df <span class="op" style="color: #5E5E5E;">=</span> df[[<span class="st" style="color: #20794D;">'ORIGIN'</span>, <span class="st" style="color: #20794D;">'DEST'</span>, <span class="st" style="color: #20794D;">'TAXI_OUT'</span>, </span>
<span id="cb27-2">                    <span class="st" style="color: #20794D;">'AIR_TIME'</span>, <span class="st" style="color: #20794D;">'DISTANCE'</span>, <span class="st" style="color: #20794D;">'OP_CARRIER'</span>]]</span>
<span id="cb27-3">origin_df <span class="op" style="color: #5E5E5E;">=</span> projection_df[</span>
<span id="cb27-4">    (projection_df[<span class="st" style="color: #20794D;">'ORIGIN'</span>].isin((<span class="st" style="color: #20794D;">'DCA'</span>, <span class="st" style="color: #20794D;">'EWR'</span>))) <span class="op" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb27-5">    (projection_df[<span class="st" style="color: #20794D;">'DEST'</span>].isin((<span class="st" style="color: #20794D;">'DCA'</span>, <span class="st" style="color: #20794D;">'EWR'</span>))) <span class="op" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb27-6">    (projection_df[<span class="st" style="color: #20794D;">'OP_CARRIER'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'XE'</span>)]</span>
<span id="cb27-7">(origin_df</span>
<span id="cb27-8">     .groupby([<span class="st" style="color: #20794D;">'ORIGIN'</span>, <span class="st" style="color: #20794D;">'DEST'</span>])</span>
<span id="cb27-9">     .agg(</span>
<span id="cb27-10">         avg_taxi_out<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'TAXI_OUT'</span>, <span class="st" style="color: #20794D;">'mean'</span>),</span>
<span id="cb27-11">         max_air_time<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'AIR_TIME'</span>, <span class="st" style="color: #20794D;">'max'</span>),</span>
<span id="cb27-12">         total_distance<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'DISTANCE'</span>, <span class="st" style="color: #20794D;">'sum'</span>))</span>
<span id="cb27-13">     .sort_index(level<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb27-14">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th>avg_taxi_out</th>
      <th>max_air_time</th>
      <th>total_distance</th>
    </tr>
    <tr>
      <th>ORIGIN</th>
      <th>DEST</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>DCA</th>
      <th>EWR</th>
      <td>22.116009</td>
      <td>87.0</td>
      <td>828835.0</td>
    </tr>
    <tr>
      <th>EWR</th>
      <th>DCA</th>
      <td>23.675481</td>
      <td>93.0</td>
      <td>831024.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>We can make it a bit more concise by using <code>.query</code> for filtering pushdown.</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:46:08.269756Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:46:04.842405Z&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">(df</span>
<span id="cb28-2"> .query(<span class="st" style="color: #20794D;">'OP_CARRIER == "XE" and ORIGIN in ("DCA", "EWR") and DEST in ("DCA", "EWR")'</span>)</span>
<span id="cb28-3"> .groupby([<span class="st" style="color: #20794D;">'ORIGIN'</span>, <span class="st" style="color: #20794D;">'DEST'</span>])</span>
<span id="cb28-4"> .agg(</span>
<span id="cb28-5">     avg_taxi_out<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'TAXI_OUT'</span>, <span class="st" style="color: #20794D;">'mean'</span>),</span>
<span id="cb28-6">     max_air_time<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'AIR_TIME'</span>, <span class="st" style="color: #20794D;">'max'</span>),</span>
<span id="cb28-7">     total_distance<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'DISTANCE'</span>, <span class="st" style="color: #20794D;">'sum'</span>))</span>
<span id="cb28-8">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th>avg_taxi_out</th>
      <th>max_air_time</th>
      <th>total_distance</th>
    </tr>
    <tr>
      <th>ORIGIN</th>
      <th>DEST</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>DCA</th>
      <th>EWR</th>
      <td>22.116009</td>
      <td>87.0</td>
      <td>828835.0</td>
    </tr>
    <tr>
      <th>EWR</th>
      <th>DCA</th>
      <td>23.675481</td>
      <td>93.0</td>
      <td>831024.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>This approach took only about half the time (~3s) compared to our earlier one because&nbsp;<code>.query</code> uses a modified syntax of python and also indexing thus resulting in more efficient evaluation. We can now compare that to our SQL counterpart…</p>
<div class="cell" data-executetime="{&quot;end_time&quot;:&quot;2022-05-27T19:47:12.947960Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:47:12.518760Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="op" style="color: #5E5E5E;">%%</span>sql</span>
<span id="cb29-2"></span>
<span id="cb29-3">select</span>
<span id="cb29-4">    ORIGIN,</span>
<span id="cb29-5">    DEST,</span>
<span id="cb29-6">    AVG(TAXI_OUT) <span class="im" style="color: #00769E;">as</span> avg_taxi_out,</span>
<span id="cb29-7">    MAX(AIR_TIME) <span class="im" style="color: #00769E;">as</span> max_air_time,</span>
<span id="cb29-8">    SUM(DISTANCE) <span class="im" style="color: #00769E;">as</span> total_distance</span>
<span id="cb29-9"></span>
<span id="cb29-10"><span class="im" style="color: #00769E;">from</span> df</span>
<span id="cb29-11"></span>
<span id="cb29-12">where</span>
<span id="cb29-13">    OP_CARRIER <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'XE'</span> <span class="kw" style="color: #003B4F;">and</span></span>
<span id="cb29-14">    ORIGIN <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'DCA'</span>, <span class="st" style="color: #20794D;">'EWR'</span>) <span class="kw" style="color: #003B4F;">and</span></span>
<span id="cb29-15">    DEST <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'DCA'</span>, <span class="st" style="color: #20794D;">'EWR'</span>)</span>
<span id="cb29-16">    </span>
<span id="cb29-17">group by ORIGIN, DEST</span>
<span id="cb29-18">order by ORIGIN</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>ORIGIN</th>
      <th>DEST</th>
      <th>avg_taxi_out</th>
      <th>max_air_time</th>
      <th>total_distance</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>DCA</td>
      <td>EWR</td>
      <td>22.116009</td>
      <td>87.0</td>
      <td>828835.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>EWR</td>
      <td>DCA</td>
      <td>23.675481</td>
      <td>93.0</td>
      <td>831024.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>This ~400ms execution with duckdb above is around an <strong><em>order of magnitude faster</em></strong> and also a lot cleaner, I’d say. :wink:</p>
<p>Notice that the data is already loaded under <code>df</code> and hence we don’t need to read from the source parquet file.</p>
<blockquote class="blockquote">
<p>In the same way, we can also improve the performance of our queries <em>drastically</em> when using <strong><em>joins</em></strong> across multiple tables. I leave this as an exercise to the reader.</p>
</blockquote>
<p><em>But why actually load data into memory in the first place when we can process it more efficiently with it being just on disk?</em> Often times, the data is too big to load into memory anyways.</p>
<p>To do that, we just need to create a <code>VIEW</code> to our data which lets us query the table directly without loading onto memory and update the source from the dataframe <code>df</code> to the newly created view instead.<sup>3</sup></p>
</section>
</section>
<section id="accessing-data-with-views" class="level1">
<h1>Accessing data with <code>Views</code></h1>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="op" style="color: #5E5E5E;">%%</span>sql</span>
<span id="cb30-2"></span>
<span id="cb30-3">create view airlinedata <span class="im" style="color: #00769E;">as</span> select <span class="op" style="color: #5E5E5E;">*</span> <span class="im" style="color: #00769E;">from</span> <span class="st" style="color: #20794D;">'data/airline_data/data.parquet'</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb30-4"></span>
<span id="cb30-5">select</span>
<span id="cb30-6">    ORIGIN,</span>
<span id="cb30-7">    DEST,</span>
<span id="cb30-8">    AVG(TAXI_OUT) <span class="im" style="color: #00769E;">as</span> avg_taxi_out,</span>
<span id="cb30-9">    MAX(AIR_TIME) <span class="im" style="color: #00769E;">as</span> max_air_time,</span>
<span id="cb30-10">    SUM(DISTANCE) <span class="im" style="color: #00769E;">as</span> total_distance</span>
<span id="cb30-11"></span>
<span id="cb30-12"><span class="im" style="color: #00769E;">from</span> airlinedata</span>
<span id="cb30-13"></span>
<span id="cb30-14">where</span>
<span id="cb30-15">    OP_CARRIER <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'XE'</span> <span class="kw" style="color: #003B4F;">and</span></span>
<span id="cb30-16">    ORIGIN <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'DCA'</span>, <span class="st" style="color: #20794D;">'EWR'</span>) <span class="kw" style="color: #003B4F;">and</span></span>
<span id="cb30-17">    DEST <span class="kw" style="color: #003B4F;">in</span> (<span class="st" style="color: #20794D;">'DCA'</span>, <span class="st" style="color: #20794D;">'EWR'</span>)</span>
<span id="cb30-18"></span>
<span id="cb30-19"><span class="op" style="color: #5E5E5E;">--</span> you can also use `ALL` instead of each column</span>
<span id="cb30-20">group by ALL</span>
<span id="cb30-21">order by ORIGIN</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>ORIGIN</th>
      <th>DEST</th>
      <th>avg_taxi_out</th>
      <th>max_air_time</th>
      <th>total_distance</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>DCA</td>
      <td>EWR</td>
      <td>22.116009</td>
      <td>87.0</td>
      <td>828835.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>EWR</td>
      <td>DCA</td>
      <td>23.675481</td>
      <td>93.0</td>
      <td>831024.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>This is such a powerful feature and allows us to explore <em>lot</em> more data than traditionally possible with pandas.</p>
<p>We can also check the datatypes and other metadata with <code>describe view/table name</code></p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;">#collapse-output</span></span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="op" style="color: #5E5E5E;">%</span>sql describe airlinedata</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>column_name</th>
      <th>column_type</th>
      <th>null</th>
      <th>key</th>
      <th>default</th>
      <th>extra</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>FL_DATE</td>
      <td>DATE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>1</th>
      <td>OP_CARRIER</td>
      <td>VARCHAR</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>2</th>
      <td>OP_CARRIER_FL_NUM</td>
      <td>INTEGER</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>3</th>
      <td>ORIGIN</td>
      <td>VARCHAR</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>4</th>
      <td>DEST</td>
      <td>VARCHAR</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>5</th>
      <td>CRS_DEP_TIME</td>
      <td>INTEGER</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>6</th>
      <td>DEP_TIME</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>7</th>
      <td>DEP_DELAY</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>8</th>
      <td>TAXI_OUT</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>9</th>
      <td>WHEELS_OFF</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>10</th>
      <td>WHEELS_ON</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>11</th>
      <td>TAXI_IN</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>12</th>
      <td>CRS_ARR_TIME</td>
      <td>INTEGER</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>13</th>
      <td>ARR_TIME</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>14</th>
      <td>ARR_DELAY</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>15</th>
      <td>CANCELLED</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>16</th>
      <td>CANCELLATION_CODE</td>
      <td>VARCHAR</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>17</th>
      <td>DIVERTED</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>18</th>
      <td>CRS_ELAPSED_TIME</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>19</th>
      <td>ACTUAL_ELAPSED_TIME</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>20</th>
      <td>AIR_TIME</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>21</th>
      <td>DISTANCE</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>22</th>
      <td>CARRIER_DELAY</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>23</th>
      <td>WEATHER_DELAY</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>24</th>
      <td>NAS_DELAY</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>25</th>
      <td>SECURITY_DELAY</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>26</th>
      <td>LATE_AIRCRAFT_DELAY</td>
      <td>DOUBLE</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>27</th>
      <td>Unnamed: 27</td>
      <td>VARCHAR</td>
      <td>YES</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<section id="using-approximations" class="level2">
<h2 class="anchored" data-anchor-id="using-approximations">Using approximations</h2>
<p>At times, it suffices just to get an estimate of certain data rather than a precise answer. Using approximations would help us to just that.</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="op" style="color: #5E5E5E;">%%</span>sql</span>
<span id="cb32-2"></span>
<span id="cb32-3">select</span>
<span id="cb32-4">    OP_CARRIER,</span>
<span id="cb32-5">    approx_count_distinct(DEST) <span class="im" style="color: #00769E;">as</span> approx_num_unique_destinations</span>
<span id="cb32-6"></span>
<span id="cb32-7"><span class="im" style="color: #00769E;">from</span> airlinedata</span>
<span id="cb32-8"></span>
<span id="cb32-9">group by <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb32-10">order by <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb32-11"></span>
<span id="cb32-12">limit <span class="dv" style="color: #AD0000;">10</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>OP_CARRIER</th>
      <th>approx_num_unique_destinations</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>9E</td>
      <td>186</td>
    </tr>
    <tr>
      <th>1</th>
      <td>AA</td>
      <td>116</td>
    </tr>
    <tr>
      <th>2</th>
      <td>AS</td>
      <td>77</td>
    </tr>
    <tr>
      <th>3</th>
      <td>B6</td>
      <td>73</td>
    </tr>
    <tr>
      <th>4</th>
      <td>CO</td>
      <td>85</td>
    </tr>
    <tr>
      <th>5</th>
      <td>DL</td>
      <td>171</td>
    </tr>
    <tr>
      <th>6</th>
      <td>EV</td>
      <td>205</td>
    </tr>
    <tr>
      <th>7</th>
      <td>F9</td>
      <td>130</td>
    </tr>
    <tr>
      <th>8</th>
      <td>FL</td>
      <td>75</td>
    </tr>
    <tr>
      <th>9</th>
      <td>G4</td>
      <td>126</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="op" style="color: #5E5E5E;">%%</span>sql</span>
<span id="cb33-2"></span>
<span id="cb33-3">select</span>
<span id="cb33-4">    OP_CARRIER,</span>
<span id="cb33-5">    <span class="op" style="color: #5E5E5E;">--</span> takes more time to compute</span>
<span id="cb33-6">    count(distinct DEST) <span class="im" style="color: #00769E;">as</span> num_unique_destinations</span>
<span id="cb33-7"></span>
<span id="cb33-8"><span class="im" style="color: #00769E;">from</span> airlinedata</span>
<span id="cb33-9"></span>
<span id="cb33-10">group by <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb33-11">order by <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb33-12"></span>
<span id="cb33-13">limit <span class="dv" style="color: #AD0000;">10</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>OP_CARRIER</th>
      <th>num_unique_destinations</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>9E</td>
      <td>185</td>
    </tr>
    <tr>
      <th>1</th>
      <td>AA</td>
      <td>116</td>
    </tr>
    <tr>
      <th>2</th>
      <td>AS</td>
      <td>77</td>
    </tr>
    <tr>
      <th>3</th>
      <td>B6</td>
      <td>73</td>
    </tr>
    <tr>
      <th>4</th>
      <td>CO</td>
      <td>85</td>
    </tr>
    <tr>
      <th>5</th>
      <td>DL</td>
      <td>170</td>
    </tr>
    <tr>
      <th>6</th>
      <td>EV</td>
      <td>205</td>
    </tr>
    <tr>
      <th>7</th>
      <td>F9</td>
      <td>129</td>
    </tr>
    <tr>
      <th>8</th>
      <td>FL</td>
      <td>75</td>
    </tr>
    <tr>
      <th>9</th>
      <td>G4</td>
      <td>126</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Our approximation query earlier ran about 3-4 times faster than the precise one in this case. This is crucial when responsiveness is more important than precision (esp.&nbsp;for larger datasets).</p>
</section>
<section id="using-window-functions" class="level2">
<h2 class="anchored" data-anchor-id="using-window-functions">Using Window functions</h2>
<p>Finally, let’s wrap our analysis by showing off a bit more of what duckdb can do using some advanced SQL operations.</p>
<p>We create two CTEs (Common Table Expressions) to calculate a couple of features. We do filter &amp; projection pushdowns in one CTE and compute our desired features in another. The first feature is a simple demo to showcase <code>if-else</code> support. The second feature is a bit advanced where we find out the last destination a given air carrier has flown to, sorted by flying date. And when it doesn’t exist, replace it with <code>NA</code>. We then take a sample from the final resultant set.</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="op" style="color: #5E5E5E;">%%</span>sql</span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="cf" style="color: #003B4F;">with</span> limited_data <span class="im" style="color: #00769E;">as</span> (</span>
<span id="cb34-4">    select </span>
<span id="cb34-5">        FL_DATE,</span>
<span id="cb34-6">        ORIGIN, </span>
<span id="cb34-7">        DEST, </span>
<span id="cb34-8">        DISTANCE,</span>
<span id="cb34-9">        OP_CARRIER,</span>
<span id="cb34-10">    <span class="im" style="color: #00769E;">from</span> airlinedata</span>
<span id="cb34-11">    where FL_DATE <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="st" style="color: #20794D;">'2015-01-01'</span>    </span>
<span id="cb34-12">),</span>
<span id="cb34-13"></span>
<span id="cb34-14">last_destination_data <span class="im" style="color: #00769E;">as</span> (</span>
<span id="cb34-15">    select <span class="op" style="color: #5E5E5E;">*</span>,</span>
<span id="cb34-16">        case</span>
<span id="cb34-17">            when DISTANCE<span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">1.60934</span> <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">500</span> then <span class="st" style="color: #20794D;">'yes'</span></span>
<span id="cb34-18">            <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">'no'</span></span>
<span id="cb34-19">        end <span class="im" style="color: #00769E;">as</span> distance_more_than_500_km,</span>
<span id="cb34-20"></span>
<span id="cb34-21">        coalesce(last_value(DEST) over (</span>
<span id="cb34-22">            partition by OP_CARRIER</span>
<span id="cb34-23">            order by FL_DATE</span>
<span id="cb34-24">            rows between unbounded preceding <span class="kw" style="color: #003B4F;">and</span> <span class="dv" style="color: #AD0000;">1</span> preceding</span>
<span id="cb34-25">        ), <span class="st" style="color: #20794D;">'NA'</span>) <span class="im" style="color: #00769E;">as</span> last_destination_flown_with_this_carrier</span>
<span id="cb34-26"></span>
<span id="cb34-27">    <span class="im" style="color: #00769E;">from</span> limited_data</span>
<span id="cb34-28">)</span>
<span id="cb34-29"></span>
<span id="cb34-30">select <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb34-31"><span class="im" style="color: #00769E;">from</span> last_destination_data</span>
<span id="cb34-32">using sample <span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>FL_DATE</th>
      <th>ORIGIN</th>
      <th>DEST</th>
      <th>DISTANCE</th>
      <th>OP_CARRIER</th>
      <th>distance_more_than_500_km</th>
      <th>last_destination_flown_with_this_carrier</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2018-07-10</td>
      <td>DCA</td>
      <td>LGA</td>
      <td>214.0</td>
      <td>YX</td>
      <td>no</td>
      <td>DCA</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2015-05-08</td>
      <td>DAL</td>
      <td>BWI</td>
      <td>1209.0</td>
      <td>WN</td>
      <td>yes</td>
      <td>BWI</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2018-03-30</td>
      <td>LAS</td>
      <td>SJC</td>
      <td>386.0</td>
      <td>WN</td>
      <td>yes</td>
      <td>SJC</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2015-07-10</td>
      <td>BOS</td>
      <td>MSP</td>
      <td>1124.0</td>
      <td>DL</td>
      <td>yes</td>
      <td>DTW</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2016-06-01</td>
      <td>DTW</td>
      <td>BWI</td>
      <td>409.0</td>
      <td>DL</td>
      <td>yes</td>
      <td>DTW</td>
    </tr>
    <tr>
      <th>5</th>
      <td>2017-07-26</td>
      <td>GEG</td>
      <td>MSP</td>
      <td>1175.0</td>
      <td>DL</td>
      <td>yes</td>
      <td>SAN</td>
    </tr>
    <tr>
      <th>6</th>
      <td>2017-01-10</td>
      <td>DFW</td>
      <td>ACT</td>
      <td>89.0</td>
      <td>EV</td>
      <td>no</td>
      <td>DFW</td>
    </tr>
    <tr>
      <th>7</th>
      <td>2015-01-01</td>
      <td>PHX</td>
      <td>DRO</td>
      <td>351.0</td>
      <td>OO</td>
      <td>yes</td>
      <td>BFL</td>
    </tr>
    <tr>
      <th>8</th>
      <td>2018-05-06</td>
      <td>DFW</td>
      <td>MCO</td>
      <td>985.0</td>
      <td>AA</td>
      <td>yes</td>
      <td>IAH</td>
    </tr>
    <tr>
      <th>9</th>
      <td>2018-04-30</td>
      <td>MSY</td>
      <td>LAX</td>
      <td>1670.0</td>
      <td>WN</td>
      <td>yes</td>
      <td>LAX</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Nice, isn’t it?! The same operation is unimaginably complex (for me, at least) in pandas. 🤯</p>
<p>With DuckDB, we can combine one or more of many of such complex operations and execute in one go without worrying much about manual optimizations.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>We have noticed how performant DuckDB is and how it brings the whole SQL ecosystem into Pandas. Its simple installation and light footprint means that we can integrate this into our existing workflows with minimal effort and achieve maximum gains in terms of execution speeds&nbsp;. We can also continue using pandas on larger datasets without loading them into memory or jumping onto a full blown distributed computing setup (<em>for a reasonable extent</em>).</p>
<p>Thanks so much for reading this far :heart:. Now you know most of the important stuff about DuckDB to get yourself started. Bear in mind that we hardly scratched the surface. DuckDB offers so much more. You can use correlated subqueries, nested types, etc. apart from its many <a href="https://duckdb.org/2022/05/04/friendlier-sql.html">user friendly features</a> such as column aliasing in <code>group by/having</code>, auto-incrementing duplicate columns, better string slicing and so on. Their <a href="https://duckdb.org/docs/">documentation</a> is very clean &amp; beginner friendly and the <a href="https://duckdb.org/news/">blog</a> has very informative posts as well. I encourage you to check those out.</p>
<section id="sidenote" class="level3">
<h3 class="anchored" data-anchor-id="sidenote">Sidenote</h3>
<ul>
<li><a href="https://modin.org/">Modin</a> tries to parallellize pandas workflow by distributing the workload to multiple CPU cores. <a href="https://www.kdnuggets.com/2019/11/speed-up-pandas-4x.html">Have a look</a> and am guessing that we can also combine modin &amp; DuckDB for an even faster runtimes.</li>
<li><a href="https://github.com/fugue-project/fugue">Fugue</a> is a new framework that provides a unified interface so that users can execute their Python, Pandas, and SQL code on various distributed computing platforms such as Spark and Dask without rewrites. Please check <a href="https://towardsdatascience.com/introducing-fugue-reducing-pyspark-developer-friction-a702230455de">here</a> for a nice introduction from its maintainer Kevin and also checkout <a href="https://towardsdatascience.com/fugue-and-duckdb-fast-sql-code-in-python-e2e2dfc0f8eb">this</a> article from Khuyen to get a feel of using it with DuckDB.</li>
</ul>
<p>I hope you have enjoyed this post and learnt something from it. Please let me know your thoughts/suggestions (or any mistakes) in the comments below. :)</p>
<p>Happy Ducking! 💚🦆💚</p>
</section>
</section>
<section id="footnotes" class="level1">
<h1>Footnotes</h1>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><a href="https://duckdb.org/2021/05/14/sql-on-pandas.html">SQL on Pandas with duckdb</a>↩︎</p></li>
<li id="fn2"><p><a href="https://duckdb.org/docs/archive/0.2.8/data/parquet">duckdb on parquet</a>↩︎</p></li>
<li id="fn3"><p>The exact execution times might vary a bit depending on the load &amp; build of your computer. I also noticed that the operations are cached and the first computation takes a bit of time but running it again or after changing the values of the columns in the <code>WHERE</code> clause would only take a couple of <code>ms</code> later on.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>EDA</category>
  <category>SQL</category>
  <guid>https://samsaara.github.io/posts/duckdb-tutorial/duckdb-tutorial.html</guid>
  <pubDate>Thu, 26 May 2022 22:00:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/duckdb-tutorial/duck.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Setting up your blog with Fastpages</title>
  <link>https://samsaara.github.io/posts/fastpages-blog-setup/fastpages-blog-setup.html</link>
  <description><![CDATA[ 




<p>After going through a bit of an intensive setup, I thought of writing up my journey &amp; difficulties I faced while setting up this blog so that it could help others who might start later. <i class="fa-solid fa-person-hiking" aria-label="person-hiking"></i></p>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>I was looking for ways to have my tiny little place on the internet &amp; therefore scouted for feasible options. As a Data Scientist, I interact with code regularly and (Jupyter) Notebooks are part of our DNA :stuck_out_tongue:. So the criteria that I had set for myself was that whatever platform I choose, it has to be (a) very code friendly, (b) easy to maintain, and (c) relatively affordable (if possible, even free).</p>
<section id="quest-for-the-right-tool" class="level3">
<h3 class="anchored" data-anchor-id="quest-for-the-right-tool">Quest for the right tool</h3>
<p>I’m a big fan of <a href="https://www.notion.so/">Notion</a> and use it for almost everything in my private life. So I initially considered setting up my blog with <a href="https://super.so/">Super</a> as you can create websites straight away from Notion pages. Though it looks great, the pricing is something that I’m still not comfortable with (yet).</p>
<p>Then there’s <a href="https://medium.com/">Medium</a>, which provides a nice writing experience but only as long as you don’t have much code in your content. Though affordable, just like Super, it has mediocre support for code formatting natively &amp; you have to optimize your content well ahead with a lot of GitHub gists. It also has no out-of-the-box support for mathematical symbols/equations. Read more about its shortcomings from a developer perspective in a great post from Prasanth Rao <a href="https://prrao87.github.io/blog/blogging-for-data-scientists">here</a>.Though, I might still consider using this service to post once in a while to increase my outreach. We’ll see how it goes. <i class="fa-solid fa-face-smile" aria-label="face-smile"></i></p>
<blockquote class="blockquote">
<p>These first two options are great if you don’t write code-heavy posts (that often) and are also very beginner friendly. But unfortunately, both of them are not free and also don’t fit well for my use case. Besides, where’s the fun if you don’t build stuff by tweaking stuff? :wink:</p>
</blockquote>
<p>I then decided to give <a href="https://pages.github.com">GitHub Pages</a> a try since it’s a free static site generator service from GitHub. One need not know (much) about HTML/CSS and can simply write content in human readable <code>Markdown</code> format which gets rendered as a webpage. Besides, you get a nice revision history of your blog as everything would be version controlled with GitHub. In combination with <a href="https://jekyllrb.com">Jekyll</a> (that powers Github pages), there’re numerous <a href="http://jekyllthemes.io">themes &amp; templates</a> to choose from and so much customization that can be made via styles, CSS, etc. I can easily convert Jupyter notebooks into markdown scripts and have them rendered with Jekyll. Since one can display code snippets, markdown cells, and embed 3<sup>rd</sup> party content within Jupyter notebooks, I intended to go with this as it fulfilled most of my needs… <em>until I rediscovered <a href="https://fastpages.fast.ai">Fastpages</a></em>.</p>
<p>Fastpages, from <a href="https://fast.ai/">fast.ai</a>, turbocharges Jupyter notebooks by automating the process of creating blog posts from notebooks via Github Actions. We can write content in <em>notebooks markdown files, or <u>even Word</u> documents</em> and have them rendered as a web page. It offers so much more functionality on-top like code folding, interactive plots on a static web page via embeddings, comments &amp; emoji support :heart_eyes_cat:, etc. For an excellent introduction, please refer to the <a href="https://github.com/fastai/fastpages">official documentation</a>.</p>
<p>That has convinced me &amp; so now you’re reading this site built with Fastpages. 🎉</p>
</section>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>Fortunately, <a href="https://github.com/fastai/fastpages#welcome-to-fastpages">Fastpages</a> is very well documented and it is highly recommended that you go through that first. However, you might still encounter some problems because of some outdated documentation, and if in case you want to test it locally on Linux systems, which is what I cover here. So, without further ado, let’s dive in.</p>
<ol type="1">
<li>Think of a name for your blog. It can just be <code>blog</code> like mine.</li>
<li>Go through the setup instructions detailed <a href="https://github.com/fastai/fastpages#setup-instructions">here</a>.
<ol type="1">
<li>It might happen that once after you try to generate a copy as per the instructions above, a PR won’t be automatically generated. The debug instructions in the README are a bit outdated. In this case, go to the <code>Settings -&gt; Actions -&gt; General</code> section of your newly created blog repository and ensure that you have <code>Read and write permissions</code> enabled and the last checkbox is ✔️ like :point_down:. Hit <code>Save</code>. <img src="https://samsaara.github.io/posts/fastpages-blog-setup/actions_debug.png" class="img-fluid"></li>
<li>Go to the <code>Actions</code> tab and you might see a failed section. Ignore what it is for now and click that failed one. Most likely it’d be a <code>Setup</code> workflow failure. On the top right, from the drop-down menu <code>Re-run jobs</code>, select <code>Re-run failed jobs</code>.</li>
<li>Once the above steps are all ✅, go to the <code>Pull Requests</code> tab and wait for some time. Your first PR would soon be automatically created. You can also optionally check the progress under the <code>Actions</code> tab if desired.</li>
<li>Now follow the instructions in the PR and merge it.</li>
</ol></li>
<li>Congratulations :confetti_ball:. Your blog would soon be up &amp; running at <code>{your-username}.github.io/{repo-name}</code>. Now you can make changes directly on GitHub online or create notebook/markdown/Word files locally and simply upload them as per the instructions into the right folder. Your blog would be updated just like that (in a few minutes). 🪄</li>
</ol>
<section id="test-locally" class="level3">
<h3 class="anchored" data-anchor-id="test-locally">Test Locally</h3>
<p>In most of the cases, you might want to check how your post looks like before you publish to make sure it looks as you intend it to be, especially when it contains data from different sources or in different formats. This is when having the option of testing it locally comes in handy. With Fastpages, you can run your blog locally to see how it would look like so that you can fix any nitty gritty details before pushing it online.</p>
<p>Fastpages again provides a <a href="https://github.com/fastai/fastpages/blob/master/_fastpages_docs/DEVELOPMENT.md">good documentation</a> on how to test it locally with the help of Docker <i class="fa-brands fa-docker" aria-label="docker"></i>. It has worked fine on my Mac <i class="fa-solid fa-laptop" aria-label="laptop"></i> but installing/upgrading Docker on Linux <i class="fa-brands fa-linux" aria-label="linux"></i> is still nowhere as smooth as on Mac and hence I had to go through a bit of digging into forums to make it work on my Ubuntu <i class="fa-brands fa-fa-ubuntu" aria-label="fa-ubuntu"></i> machine especially on the latest version <strong>22.04 LTS</strong>. So, going forward I’d cover only this scenario.</p>
<div class="callout-info callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Info
</div>
</div>
<div class="callout-body-container callout-body">
<p>For Mac/Windows, all you need is Docker installed and simply run <font color="teal">make server</font> from the root level of the repo.</p>
</div>
</div>
<ol type="1">
<li>Docker Desktop for Linux (DD4L) is still in beta and is only available for <code>21.XX</code> versions of Ubuntu. So if you have that, go ahead with the setup below. If not, skip to the next step.
<ol type="1">
<li>Follow the Docker installation instructions from the <a href="https://docs.docker.com/desktop/linux/">official documentation</a>.</li>
<li>If you had installed Docker via <code>Snap</code> or you had a previous preview version of Docker Desktop installed, it’s recommended to uninstall them completely. See more <a href="https://askubuntu.com/questions/935569/how-to-completely-uninstall-docker">here</a> for help on how to do that.</li>
</ol></li>
<li>Since Ubuntu <strong>22.04 LTS</strong> is not yet supported, I ended up installing <i class="fa-brands fa-docker" aria-label="docker"></i> (not Docker Desktop) from <a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-22-04">here</a>.</li>
<li>Check if you have <code>docker-compose</code> installed by doing <code>which docker-compose</code> or <code>docker-compose -v</code>. If not, install it as a <a href="https://docs.docker.com/compose/install/#install-compose-as-standalone-binary-on-linux-systems">standalone binary</a>.
<ol type="1">
<li>I’m not sure if it also installs <code>Make</code> but if it doesn’t, please install it too following the instructions <a href="https://www.linuxfordevices.com/tutorials/install-cmake-on-linux">here</a>.</li>
</ol></li>
<li>Run <code>make server</code> from the top level of your repository.
<ol type="1">
<li>Your Jupyter server would be available shortly at <code>http://localhost:8080/tree</code> and it would take a bit of time for your blog to be available under <code>http://localhost:4000/{your-repo-name}</code>. Be patient. :relieved:</li>
</ol></li>
</ol>
<div class="callout-info callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Info
</div>
</div>
<div class="callout-body-container callout-body">
<p>if <font color="teal">make server</font> doesn’t work because of permission issues, try <font color="teal"><b>sudo</b> make server</font> instead</p>
</div>
</div>
<hr>
<p>Congratulations once again! :tada: You now have a local version of your blog running. You can create new posts and have them rendered almost instantly :sparkles:. Once you’re happy with the content &amp; format, you can push it (preferably in a new branch and making a PR so that your <em>main/master</em> branch is unaffected). If you feel a bit adventurous, try customizing your blog more to your liking by changing fonts/styles, etc.</p>
<p>If you like this blog’s customization, checkout its <i class="fa-brands fa-github" aria-label="github"></i> <a href="https://github.com/samsaara/blog">repo</a> esp.&nbsp;its <code>custom-style.scss</code>. May be I’ll write another post detailing it.</p>
<p>Good Luck &amp; Happy Blogging! ❤️</p>


</section>
</section>

 ]]></description>
  <category>meta</category>
  <guid>https://samsaara.github.io/posts/fastpages-blog-setup/fastpages-blog-setup.html</guid>
  <pubDate>Sun, 08 May 2022 22:00:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/fastpages-blog-setup/fastpages_diagram.png" medium="image" type="image/png" height="41" width="144"/>
</item>
</channel>
</rss>
