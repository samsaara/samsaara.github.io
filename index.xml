<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Saṃsāra</title>
<link>https://samsaara.github.io/</link>
<atom:link href="https://samsaara.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>posts about data science, learning &amp; any other upcoming random stuff from Vivek Vaddina</description>
<image>
<url>https://samsaara.github.io/images/logo.png</url>
<title>Saṃsāra</title>
<link>https://samsaara.github.io/</link>
<height>144</height>
<width>144</width>
</image>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Tue, 05 Aug 2025 18:30:00 GMT</lastBuildDate>
<item>
  <title>Simple &amp; Fast Local DL Setup with PyTorch, Pixi &amp; Nvidia</title>
  <link>https://samsaara.github.io/posts/quick-pytorch-setup-with-pixi-Nvidia/</link>
  <description><![CDATA[ 






<p>I recently distro-hopped and this time settled onto <a href="https://projectbluefin.io">BlueFin</a>, an atomic OS from <a href="https://universal-blue.org">Universal Blue</a> based on <i class="fa-brands fa-fedora" aria-label="fedora"></i> Silverblue. I had to setup my local deep learning environment again and this provided a nice opportunity to test a new setup afresh.</p>
<p>I had previously <a href="../../posts/fastai-env-setup/index.html">setup fastai with mamba</a> but this time I wanted to test <a href="https://pixi.sh/">pixi</a>. It’s a <a href="https://prefix.dev/blog/pixi_a_fast_conda_alternative">lot faster and overall, a better alternative</a> to mamba/conda.</p>
<p>Installing deep learning libraries locally is always a daunting task, dealing with system level dependencies and potentially corrupting them being one of the main reasons. Let’s see how easy and safe it is with <em>pixi</em>.</p>
<p>First, make sure you have NVIDIA drivers setup correctly matching your system. You can check that out by running <code>nvidia-smi</code> on your cmdline which gives an output something similar to this.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> nvidia-smi</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+-----------------------------------------------------------------------------------------+</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NVIDIA-SMI</span> 575.64.05              Driver Version: 575.64.05      CUDA Version: 12.9     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-----------------------------------------+------------------------+----------------------+</span></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">GPU</span>  Name                 Persistence-M <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Bus-Id</span>          Disp.A <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Volatile</span> Uncorr. ECC <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Fan</span>  Temp   Perf          Pwr:Usage/Cap <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>           <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Memory-Usage</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">GPU-Util</span>  Compute M. <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>                                         <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>                        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>               <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">MIG</span> M. <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">=========================================+========================+======================</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span>  NVIDIA GeForce RTX 4060 ...    Off <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>   <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">00000000:01:00.0</span> Off <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>                  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">N/A</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">N/A</span>   47C    P0             15W /   75W <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">12MiB</span> /   8188MiB <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0%</span>      Default <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>                                         <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>                        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>                  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">N/A</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+-----------------------------------------+------------------------+----------------------+</span></span>
<span id="cb1-14">                                                                                         </span>
<span id="cb1-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+-----------------------------------------------------------------------------------------+</span></span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Processes:</span>                                                                              <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">GPU</span>   GI   CI              PID   Type   Process name                        GPU Memory <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ID</span>   ID                                                               Usage      <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">=========================================================================================</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span>    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span>   N/A  N/A            3550      G   /usr/bin/gnome-shell                      2MiB <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+-----------------------------------------------------------------------------------------+</span></span></code></pre></div>
<p>As you can see, I have nvidia driver <strong>v575</strong> with CUDA <strong>v12.9</strong>. As of this writing, the latest CUDA version which pytorch supports is <strong>12.8</strong>. So, we’re good to go.</p>
<p>Now go ahead and install pixi by your preferred method and later run <code>pixi init dl_setup</code> to create a folder named <em>dl_setup</em> and initialize it. This creates a default <strong>pixi.toml</strong> configuration file which is similar to <strong>pyproject.toml</strong> but better.</p>
<p>The first section <em>workspace</em> of the TOML file should look like this:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[workspace]</span></span>
<span id="cb2-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">channels</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conda-forge"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dl_setup"</span></span>
<span id="cb2-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">platforms</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linux-64"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1.0"</span></span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>If in case, you already use <strong>pyproject.toml</strong> or you prefer to have that instead, just pass the flag <code>--format=pyproject</code> to the <em>init</em> cmd earlier. You also need to do some extra steps if in case you go this way. (E.g., by prefixing each section with <strong>tool.prefix</strong> and including <strong>build-system</strong> section. Refer to <a href="https://pixi.sh/latest/python/tutorial/#pixitoml-and-pyprojecttoml">pixi’s documentation</a>)</p>
</div>
</div>
<p>First run <code>pixi add "python&gt;=3.12"</code> to add python itself as a dependency.</p>
<p>Pixi supports installing PyPI dependencies alongside Conda packages, and you can typically run <code>pixi add &lt;pkg&gt; --pypi</code> to install a PyPi package. For example, PyTorch—which is now officially available only via PyPi—could be installed this way. However, currently, it is not possible to specify a custom <code>index-url</code> (the URL from which to download wheels) via the command line. Therefore, you need to manually edit the <strong>pixi.toml</strong> file to set the appropriate index URL.</p>
<p>Before that, quickly note the latest versions (minus the patch versions) of <strong>torch, torchaudio &amp; torchvision</strong> from PyPi so that we can manually add them in the config. Also, since this setup involves system dependencies (e.g., CUDA), we need to specify that as well so that pixi can take advantage of that during dependency resolution.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[system-requirements]</span>                                         </span>
<span id="cb3-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cuda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12.0"</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># just major version suffices</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[feature.gpu.pypi-dependencies]</span></span>
<span id="cb3-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">torch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=2.7.0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">, </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://download.pytorch.org/whl/cu128"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> }</span></span>
<span id="cb3-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">torchaudio</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=2.7.0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">, </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://download.pytorch.org/whl/cu128"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> }</span></span>
<span id="cb3-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">torchvision</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=0.22.0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">, </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://download.pytorch.org/whl/cu128"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> }</span></span></code></pre></div>
<p>We have added a feature section named <strong>gpu</strong> and since these are <em>PyPi</em> dependencies, you notice that appended at the last. Pixi already defines a default environment named <strong>default</strong>. We just need to include this feature to that environment before creating it by running the following on the cmdline:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> pixi workspace environment add default <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--feature</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gpu <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--force</span> </span></code></pre></div>
<p>It creates the following section in the <strong>toml</strong> file which makes sure that the <strong>gpu</strong> dependencies are included in that environment when run.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[environments]</span></span>
<span id="cb5-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">default</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpu"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>Let’s install <em>Jupyter</em> as well so that we can explore interactively. Since pixi handles conda and pip dependencies, we can safely run <code>pixi add jupyterlab</code> that fetches this from <strong>conda-forge</strong> channel by default.</p>
<p>Finally, if we want to run a jupyter notebook session with a shortcut, we can add a <strong>task</strong> in pixi by running:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> pixi task add jupyter <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jupyter lab"</span></span></code></pre></div>
<hr>
<p>The whole <strong>pixi.toml</strong> might look something like this:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[workspace]</span></span>
<span id="cb7-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">channels</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"conda-forge"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dl_setup"</span></span>
<span id="cb7-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">platforms</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linux-64"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1.0"</span></span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[system-requirements]</span></span>
<span id="cb7-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cuda</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12.0"</span></span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[dependencies]</span></span>
<span id="cb7-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">python</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=3.12"</span></span>
<span id="cb7-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">jupyterlab</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=4.4.5,&lt;5"</span></span>
<span id="cb7-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">numpy</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=2.3.2,&lt;3"</span></span>
<span id="cb7-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">pandas</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=2.3.1,&lt;3"</span></span>
<span id="cb7-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">seaborn</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=0.13.2,&lt;0.14"</span></span>
<span id="cb7-16"></span>
<span id="cb7-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[feature.gpu.pypi-dependencies]</span></span>
<span id="cb7-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">torch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=2.7.0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">, </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://download.pytorch.org/whl/cu128"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> }</span></span>
<span id="cb7-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">torchaudio</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=2.7.0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">, </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://download.pytorch.org/whl/cu128"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> }</span></span>
<span id="cb7-20"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">torchvision</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{ </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;=0.22.0"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">, </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://download.pytorch.org/whl/cu128"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> }</span></span>
<span id="cb7-21"></span>
<span id="cb7-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[environments]</span></span>
<span id="cb7-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">default</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gpu"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-24"></span>
<span id="cb7-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[tasks]</span></span>
<span id="cb7-26"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">jupyter</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jupyter lab"</span></span></code></pre></div>
<hr>
<p>The versions might differ for you depending on the platform or when you run this.</p>
<p>We can now enjoy a full fledged jupyter lab session by simply running <code>pixi run jupyter</code> at the commandline.</p>
<p>That’s it! Happy coding!!! ⚡️✨</p>



 ]]></description>
  <category>setup</category>
  <category>pixi</category>
  <category>pytorch</category>
  <category>nvidia</category>
  <guid>https://samsaara.github.io/posts/quick-pytorch-setup-with-pixi-Nvidia/</guid>
  <pubDate>Tue, 05 Aug 2025 18:30:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/quick-pytorch-setup-with-pixi-Nvidia/pixi_nvidia_torch.png" medium="image" type="image/png" height="216" width="144"/>
</item>
<item>
  <title>Introduction to GIS with QGIS &amp; Python - Part II</title>
  <link>https://samsaara.github.io/posts/geospatial_intro_part_II/GIS_II.html</link>
  <description><![CDATA[ 






<p>Welcome back! In our <a href="https://samsaara.github.io/posts/geospatial_intro_part_I/GIS.html">last post</a>, we took a look at the basics of GIS and how we can explore some of the datasets in QGIS with shapefiles, TIFF files to derive interesting insights around air quality. This post covers loading data from CSV files on disk and also directly from online using server connections.</p>
<section id="load-data-from-text-files" class="level1">
<h1>Load data from text files</h1>
<p>For this use case, let’s examine the latest satellite data where potential 🔥 events were detected in North American region. This could be a wildfire or controlled fire or anything else and may also occupy less than one pixel of the 🛰️ image depending on the resolution of that 🛰️ that’s taking it. <a href="https://www.noaa.gov/">NOAA</a>’s Hazard Mapping System (HMS) provide daily updated data for fire &amp; smoke detected. Let’s <a href="https://www.ospo.noaa.gov/Products/land/hms.html#data">download the latest data</a>. There are multiple data formats available but since we have seen shapefile in the last post, let’s try <code>text</code> file now.</p>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_II/images/hms.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: HMS data download
</figcaption>
</figure>
</div>
<p>Let’s read a few lines from the file:</p>
<div id="fddcde0f-9e20-4351-a11a-4bbebc435fc2" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
</div>
<div id="d38b1acf-8774-456c-97bd-8608f019705a" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/hms_fire20230306.txt'</span>)</span></code></pre></div>
</div>
<div id="48b43726-3a34-433a-a036-a4ab1e962e80" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>(24485, 8)</code></pre>
</div>
</div>
<div id="9f268e94-0a62-4705-acd5-60b5747df8fc" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Lon</th>
<th data-quarto-table-cell-role="th">Lat</th>
<th data-quarto-table-cell-role="th">YearDay</th>
<th data-quarto-table-cell-role="th">Time</th>
<th data-quarto-table-cell-role="th">Satellite</th>
<th data-quarto-table-cell-role="th">Method</th>
<th data-quarto-table-cell-role="th">Ecosystem</th>
<th data-quarto-table-cell-role="th">FRP</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">17651</td>
<td>-90.261902</td>
<td>19.713993</td>
<td>2023065</td>
<td>2201</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>34</td>
<td>87.415</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2835</td>
<td>-78.968910</td>
<td>21.834669</td>
<td>2023065</td>
<td>1746</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>93</td>
<td>-999.000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5250</td>
<td>-76.867294</td>
<td>18.226049</td>
<td>2023065</td>
<td>1840</td>
<td>NOAA 20</td>
<td>VIIRS</td>
<td>24</td>
<td>5.654</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">22280</td>
<td>-98.832497</td>
<td>19.443575</td>
<td>2023066</td>
<td>46</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>41</td>
<td>78.344</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">794</td>
<td>-100.092950</td>
<td>24.831312</td>
<td>2023065</td>
<td>910</td>
<td>NOAA 20</td>
<td>VIIRS</td>
<td>47</td>
<td>1.258</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19110</td>
<td>-71.630478</td>
<td>19.319798</td>
<td>2023065</td>
<td>2231</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>91</td>
<td>32.565</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">23370</td>
<td>-83.569122</td>
<td>22.277122</td>
<td>2023066</td>
<td>216</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>93</td>
<td>220.716</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1933</td>
<td>-98.455124</td>
<td>36.903248</td>
<td>2023065</td>
<td>1650</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>31</td>
<td>-999.000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1883</td>
<td>-98.248184</td>
<td>26.366270</td>
<td>2023065</td>
<td>1646</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>94</td>
<td>-999.000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3390</td>
<td>-81.141960</td>
<td>22.947918</td>
<td>2023065</td>
<td>1758</td>
<td>SUOMI NPP</td>
<td>VIIRS</td>
<td>93</td>
<td>6.468</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>As we can see, the data contains the coordinates of the location where 🔥 detected, date and time, the 🛰️ that took the picture among other data. Especially interesting is the <code>FRP</code> as that indicates the intensity of the activity. The higher the FRP, the intense the burning.</p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>Fire radiative power (FRP) is a measure of heat output from a fire and is related to how quickly fuel is being consumed. It is directly related to the rate of biomass consumption during the active (flaming/smoldering) phase of a fire. Look <a href="https://www.ospo.noaa.gov/Products/land/hms.html#about">here</a> for more info.</p>
</div>
</div>
</div>
<p>Let’s look from which 🛰️ are we getting the data from:</p>
<div id="efb8cdff-667e-4163-b3b4-4da03ca8bf4e" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df.columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>Index(['        Lon', '        Lat', ' YearDay', ' Time', '       Satellite',
       '           Method', ' Ecosystem', '        FRP'],
      dtype='object')</code></pre>
</div>
</div>
<div id="c000fed1-5ecf-4efb-b464-89d1a41d3ac2" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># strip extra spaces</span></span>
<span id="cb8-2">df.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.columns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.strip)</span></code></pre></div>
</div>
<div id="a6eaf7b9-4f82-4b11-b107-643ee3972190" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df.Satellite.value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>       GOES-EAST    17871
       SUOMI NPP     3372
         NOAA 20     3222
       GOES-WEST       20
Name: Satellite, dtype: int64</code></pre>
</div>
</div>
<div id="bae50eb7-0ea3-48af-9421-9b4c9d80906f" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">df.Satellite.value_counts(normalize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>       GOES-EAST    0.729875
       SUOMI NPP    0.137717
         NOAA 20    0.131591
       GOES-WEST    0.000817
Name: Satellite, dtype: float64</code></pre>
</div>
</div>
<p>Almost <em>75%</em> of the data is from one source.</p>
<p>Let’s now look at the distribution of FRP</p>
<div id="f0aa2d1a-0ed4-488c-bbd2-542b1b8392c0" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span></code></pre></div>
</div>
<div id="095ec369-513b-4be5-afdc-6ab0e8b0d297" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">sns.kdeplot(df.FRP)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/geospatial_intro_part_II/GIS_II_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Most of the 🔥 places detected are relatively less intenseful. Let’s now look at their geographical distribution.</p>
<p>First, as usual, select a basemap from the ones we downloaded in the last post (look under XYZ Tiles in browser area). Ideally you would want to know the topography of the land in this case. So I went with <code>Google Terrain Hybrid</code>.</p>
<p>Now, unlike shapefiles, we can’t simply drag a text file to the canvas. Instead, goto <code>Layer-&gt; Add Layer -&gt; Add Delimited Text Layer</code>. Fill it with the information as shown.</p>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_II/images/add_txt.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Load text file
</figcaption>
</figure>
</div>
<div class="callout-hint">
<p>Don’t forget to click <strong>Add</strong> before close in step <code>5</code> above.</p>
</div>
<p>This would stack the file over our basemap. Now this is already good… but we are still not making use of the FRP information we have. Since it’s numerical data, let’s try to colorize the data based on this. We already know the higher the FRP, the intense the 🔥 is. As these are continuous values, let’s bin them into discrete classes based on the histrogram we saw above.</p>
<div id="fig-styling" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-styling-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-styling" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-a" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-a-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_II/images/fire_styling_I.jpg" id="fig-a" class="img-fluid figure-img" data-ref-parent="fig-styling">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-a-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a)
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-styling" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-b" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-b-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_II/images/fire_styling_II.jpg" id="fig-b" class="img-fluid figure-img" data-ref-parent="fig-styling">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-b-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b)
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-styling-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Styling
</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>The toolbar in fig.&nbsp;3(b) can be accessed by clicking the 🟣 circle (<code>Symbol</code> section) in fig.&nbsp;3(a). Change the values as you please.</p>
</div>
</div>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_II/images/fires.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: 🔥 activity across Northern Americas
</figcaption>
</figure>
</div>
<p>We clearly see that most of the activity is exclusively detected in the SE part of North America with most parts of Cuba, SE Mexico &amp; NW of Florida.</p>
<p>Now that we know the intensity of the fires, we can also actually know from which satellite a given data point has originated. To do that, we need to label each data point with the corresponding value in the <code>Satellite</code> field as we have seen earlier.</p>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_II/images/cuba_styling.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: Styling for Labels
</figcaption>
</figure>
</div>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_II/images/cuba.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Coordinates with Satellite names
</figcaption>
</figure>
</div>
<p>You may notice that the same coordinates have the same label repeated multiple times. That got me interested. So I digged in. I suspected that it could be because of duplicate entries of the coordinates.</p>
<div id="0213bdda-cdb9-4795-893d-c5b243830df9" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">df.shape, df.drop_duplicates().shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>((24485, 8), (24485, 8))</code></pre>
</div>
</div>
<div id="4fac60af-53e5-44d3-9daf-65c39fe661e6" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">df.drop_duplicates([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lat'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lon'</span>]).shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>(9752, 8)</code></pre>
</div>
</div>
<p>Indeed it was. But only the coordinates are duplicated but not all the fields.</p>
<div id="e98c778c-2bc1-4d2d-8e8d-a3380edf4e07" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lat'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lon'</span>]].value_counts().head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>Lat        Lon       
16.311804  -92.219566    156
19.440290  -89.355492    149
19.479744  -89.319229    131
19.153973  -90.197701    120
19.499657  -89.321320    116
dtype: int64</code></pre>
</div>
</div>
<p>Let’s take one example and see what’s changing.</p>
<div id="43f8d7fe-f2bb-45cc-b2ea-0fc5d4546d71" class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">df.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lon==-92.219566 and Lat==16.311804'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Lon</th>
<th data-quarto-table-cell-role="th">Lat</th>
<th data-quarto-table-cell-role="th">YearDay</th>
<th data-quarto-table-cell-role="th">Time</th>
<th data-quarto-table-cell-role="th">Satellite</th>
<th data-quarto-table-cell-role="th">Method</th>
<th data-quarto-table-cell-role="th">Ecosystem</th>
<th data-quarto-table-cell-role="th">FRP</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2087</td>
<td>-92.219566</td>
<td>16.311804</td>
<td>2023065</td>
<td>1700</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>93</td>
<td>22.154</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2393</td>
<td>-92.219566</td>
<td>16.311804</td>
<td>2023065</td>
<td>1721</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>93</td>
<td>33.626</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2520</td>
<td>-92.219566</td>
<td>16.311804</td>
<td>2023065</td>
<td>1730</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>93</td>
<td>32.808</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2738</td>
<td>-92.219566</td>
<td>16.311804</td>
<td>2023065</td>
<td>1741</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>93</td>
<td>31.866</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4156</td>
<td>-92.219566</td>
<td>16.311804</td>
<td>2023065</td>
<td>1800</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>93</td>
<td>53.364</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">23682</td>
<td>-92.219566</td>
<td>16.311804</td>
<td>2023066</td>
<td>251</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>93</td>
<td>25.892</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">23704</td>
<td>-92.219566</td>
<td>16.311804</td>
<td>2023066</td>
<td>256</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>93</td>
<td>31.707</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">23759</td>
<td>-92.219566</td>
<td>16.311804</td>
<td>2023066</td>
<td>301</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>93</td>
<td>32.109</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">23786</td>
<td>-92.219566</td>
<td>16.311804</td>
<td>2023066</td>
<td>306</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>93</td>
<td>29.846</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">24006</td>
<td>-92.219566</td>
<td>16.311804</td>
<td>2023066</td>
<td>336</td>
<td>GOES-EAST</td>
<td>FDC</td>
<td>93</td>
<td>29.942</td>
</tr>
</tbody>
</table>

<p>156 rows × 8 columns</p>
</div>
</div>
</div>
<div id="bdfee1a9-efdd-4dc7-ae6d-47ffb7228d4e" class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">df.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lon==-92.219566 and Lat==16.311804'</span>).Satellite.unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>array(['       GOES-EAST'], dtype=object)</code></pre>
</div>
</div>
<p>Interesting! We now have different values for <code>FRP</code> over a single coordinate but at different times.</p>
<div id="b8c9e3c4-bfe2-4bdc-851b-f6e81fa84613" class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">(df</span>
<span id="cb24-2"> .query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lon==-92.219566 and Lat==16.311804'</span>)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take one location as an example</span></span>
<span id="cb24-3"> .sort_values([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'YearDay'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>])               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sort it by time</span></span>
<span id="cb24-4"> .query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FRP &gt; 0'</span>)                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># filter out -ve values (incorrect data?)</span></span>
<span id="cb24-5"> .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># drop the index values</span></span>
<span id="cb24-6"> .FRP</span>
<span id="cb24-7"> .plot(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FRP of a single location over time'</span>, xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>, ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FRP'</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/geospatial_intro_part_II/GIS_II_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Nice! We now see how the <code>FRP</code> has evolved over time… it looks as if the 🔥 appears to have begun, spread, and intensified before eventually extinguishing or subsiding.</p>
<section id="filtering-a-text-file" class="level2">
<h2 class="anchored" data-anchor-id="filtering-a-text-file">filtering a text file</h2>
<p>Coming back to our satellite names, we can filter only for the data coming from a single satellite by right clicking on the <code>hms_fire20230306</code> layer, selecting <code>filter</code> and later entering the query like so:</p>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_II/images/csv_filter.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: Filtering a CSV/TXT file
</figcaption>
</figure>
</div>
<ul>
<li><code>1</code> - selects the field we want to filter</li>
<li><code>2</code> - gets a few sample values from that field</li>
<li><code>3</code> - double click on the field to enter it into the query box below. Alternatively you can type it as well.</li>
<li><code>4, 5</code> - double click/type</li>
<li><code>6</code> - clicking <code>Test</code> gives us how many rows that satisfy the condition. Hit <code>OK</code></li>
<li><code>7</code> - ignore (don’t click it)</li>
<li><code>8</code> - click <code>OK</code> to finalize the filtered data</li>
</ul>
<p>If you now look at the later, we only see the datapoints from the satellite we filtered.</p>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_II/images/filtered_entries.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: Map with filtered entries
</figcaption>
</figure>
</div>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">conclusion</h2>
<p>Now we have seen how to load text files and filtering for our desired data. You can also load <a href="http://wiki.gis.com/wiki/index.php/Well-known_text">Well Known Text</a> (WKT) and other text files in the same manner. Just make sure to select the appropriate radio button while loading them.</p>
</section>
</section>
<section id="add-wfs-connection" class="level1">
<h1>Add WFS Connection</h1>
<p>The Web Feature Service (WFS) protocol enables users to access and query feature data over the internet, without having to download and store the data locally. This can be particularly useful when working with large datasets or when collaborating with other users who may have different data sources or access privileges. WFS allows users to view and analyze feature data from multiple sources, combine data from different sources, and perform spatial and attribute queries on the data. This can help users to make more informed decisions and gain insights from the data that might not be apparent from a single dataset.</p>
<p>There are lot of publicly available WFS servers online (just google) including from universities, government organizations etc. <a href="https://www.geoseer.net">geoseer</a> is one such service which provides links to those servers.</p>
<p>For our purposes, we shall take a look at one WFS server that offers water level information in Germany. So head over <a href="https://www.geoseer.net/rl.php?ql=057545d9de309f76&amp;p=1&amp;q=wfs%20germany">here</a> and copy the <a href="https://www.pegelonline.wsv.de/geoserver/gk/wfs">WFS URL</a>.</p>
<p>As this is a data layer, as usual, we will add a basemap layer or two. In this case, I went with <code>CartoDB Positron</code>.</p>
<p>To add the WFS connection, goto <code>WFS/OGC API - Features</code> in the <em>browser</em> area and click <code>New Connection</code>.</p>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_II/images/wfs.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;9: New WFS Connection
</figcaption>
</figure>
</div>
<p>Once you have done that above, you will notice a new connection appearing under that section. Clicking on it will reveal the layer that you can now simply drag &amp; drop to the canvas.</p>
<p>We can right click on the added layer in the <code>Layers</code> section and select <code>Open Attribute Table</code> to reveal all its data in plaintext form. We notice that there’s a field named <code>Value</code> that shows the depth of the water level. Now just like in our last use case, you can now use this field to bin its values to get the following map.</p>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_II/images/water_levels.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;10: Water Levels in Germany
</figcaption>
</figure>
</div>
<p>It shows that the levels are higher in North than in the South (most likely being it closer to the Sea) but it’s troubling to see some major cities suffering with severe lack of ground water.</p>
<section id="conclusion-1" class="level2">
<h2 class="anchored" data-anchor-id="conclusion-1">Conclusion</h2>
<p>Just like WFS, you can also add <a href="https://en.wikipedia.org/wiki/Web_Map_Service">WMS</a>/<a href="https://en.wikipedia.org/wiki/Web_Coverage_Service">WCS</a> services much the same way to carry out analysis without downloading data onto your disk.</p>
</section>
</section>
<section id="final-words" class="level1">
<h1>Final Words</h1>
<p>In this post, we have seen how to use different types of data sources and possibly lighten our data resources on disk to perform our analysis and collaborate with others online when needed. We also performed query filtering to visualize only the data we need and how to do it in a meaningful way.</p>
<p>In the next post, we will make a bit more use of Python &amp; QGIS scripting to write a complex processing pipeline.</p>
<p>Thanks for reading.</p>
<p>Auf wiedersehen 👋</p>


</section>

 ]]></description>
  <category>EDA</category>
  <category>GIS</category>
  <category>QGIS</category>
  <guid>https://samsaara.github.io/posts/geospatial_intro_part_II/GIS_II.html</guid>
  <pubDate>Mon, 06 Mar 2023 18:30:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/geospatial_intro_part_II/unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Introduction to GIS with QGIS &amp; Python - Part I</title>
  <link>https://samsaara.github.io/posts/geospatial_intro_part_I/GIS_I.html</link>
  <description><![CDATA[ 






<p>As a data scientist, adding data analysis of geospatial information systems (GIS) to our skill set is a smart move in today’s data-driven world. The availability of free immense satellite and map data online, combined with the power of open source GIS tools, presents enormous opportunities for analyzing and visualizing geospatial data. With GIS, data scientists can enhance their data analytics and machine learning abilities, resulting in a more comprehensive understanding of complex problems such as climate change.</p>
<p>By leveraging GIS, we can monitor and track the effects of climate change on the planet by analyzing data from a wide range of sources, such as temperature sensors, satellite imagery, and ocean currents, to provide a better understanding of its impact on our environment. This information can then be used to inform decision-making processes, such as predicting sea level rise and assessing the impact on coastal cities etc.</p>
<p>Moreover, this also empowers common people by allowing them to answer questions about their own environment and surroundings. For example, farmers can use GIS to monitor crop health, water availability, and soil quality, while city dwellers can use it to explore the impact of urbanization on the environment. Anyone can access these tools to perform basic analysis, enabling them to become citizen scientists and contribute to the health of our planet.</p>
<p>In a series of posts, we will try to explore the basics of GIS, and progress towards addressing some interesting questions through the application of QGIS, Python and data visualization. Although I am also new to this area and currently learning, I invite you to join me on this excursion of discovery.</p>
<p>Together, we shall learn, experiment and explore the potential of GIS to transform data analytics by combining it with geospatial information.</p>
<p>By the end of this session, you’ll be able to do this:</p>
<div id="fig-final_map" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-final_map-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_I/images/final_map.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-final_map-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Final Map
</figcaption>
</figure>
</div>
<p>GIS, or <code>Geographic Information System</code>, is a tool for mapping and analyzing different types of data related to a specific location on 🌍. It allows you to visualize data on a map, such as population density, land use, or weather patterns. By combining data from various sources, we can uncover patterns, relationships, and derive insights that may not be apparent from individual datasets alone. It can be used to answer questions such as: Where are the most vulnerable areas to flooding? How has urbanization changed over time? And, where should we build a new school to ensure accessibility to the largest number of students? etc.</p>
<div id="fig-gislayers" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-gislayers-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-gislayers" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-a" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-a-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_I/images/gislayers_I.jpg" id="fig-a" class="img-fluid figure-img" data-ref-parent="fig-gislayers">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-a-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a)
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-gislayers" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-b" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-b-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_I/images/gislayers_II.jpg" id="fig-b" class="img-fluid figure-img" data-ref-parent="fig-gislayers">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-b-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b)
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-gislayers-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: GIS Layers<sup>1</sup>
</figcaption>
</figure>
</div>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>A <em>raster</em> layer represents <strong>continuous</strong> data throughout the map such as elevation, temperature etc. It’s made up of grid of cells and the size of these determine the resolution of the layer.</p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>A <em>vector</em> layer represents <strong>discrete</strong> data such as points, lines, polygons used typically for depiction of roads, buildings etc. This data need not be present throughout the layer.</p>
</div>
</div>
</div>
<p>QGIS is an open source tool to explore this layered GIS. Download it from <a href="https://qgis.org/">qgis.org</a> and install it. You may be greeted with the following window. You can create &amp; save the project by clicking <code>Project -&gt; Save As</code> on the top left menu of the application.</p>
<div id="fig-newproject" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-newproject-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_I/images/01_new_project.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-newproject-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: New Project
</figcaption>
</figure>
</div>
<p>The UI is mainly divided into the following areas:</p>
<ul>
<li><code>1</code> contains the <em>Browser</em> where you can access your filesystem, layers, web connections etc. (discussed later as we learn).</li>
<li><code>2</code> contains the map layers that you have imported for this project/use case.</li>
<li><code>3</code> is the canvas where the layers are actually visualized.</li>
<li><code>4</code> contains all the processing algorithms that you might need to carry your analysis and also for stylizing your map data.</li>
</ul>
<p>QGIS has <em>much, much</em> more things to offer but these four are good enough to start with.</p>
<p>The first thing we do is get some <code>basemaps</code>.</p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>A Basemap is a fundamental layer that serves as a backdrop for additional data layers. It is akin to a blank slate upon which other data layers can be superimposed to create a complete picture and is an essential reference point for all other layers, allowing users to understand the spatial relationships and patterns between various data points. The basemap can be zoomed in or out to reveal different levels of detail, just like a traditional map.</p>
</div>
</div>
</div>
<p>For this, download the <a href="https://github.com/giswqs/qgis-earthengine-examples/blob/master/Basemaps/qgis_basemaps.py">qgis_basemaps.py</a> (courtesy of <a href="https://github.com/giswqs">Asst. Prof.&nbsp;Qiusheng Wu</a>) and open the python console like so:</p>
<div id="fig-newproject" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-newproject-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_I/images/python_console.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-newproject-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Python Console
</figcaption>
</figure>
</div>
<p>Paste the downloaded script and hit run (green ▶️). You see all basemaps loaded under <code>XYZ Tiles</code> in <code>browser</code>.</p>
<p>In order to view a basemap, simply drag &amp; drop any of them into the <em>Canvas</em>. You will notice that the <em>Layers</em> widget starts getting populated. Any subsequent basemaps that you drop to the canvas will get stacked here. In general, we need one basemap layer and one or more data layers for analysis. Which basemap to choose depends on the analysis you’re carrying.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can uncheck the layers that you don’t want or simply click on them and hit <code>Ctrl+D</code> to remove them.</p>
</div>
</div>
<p>As our initial use case, let’s examine the 2020 European Air Quality dataset (head <a href="https://sdi.eea.europa.eu/catalogue/srv/eng/catalog.search#/metadata/25f13624-3465-4de5-b1d3-1a479a4fe51b">here</a>, hit <em>Direct Download</em>). This dataset provides concentrations for the air pollutants <img src="https://latex.codecogs.com/png.latex?NO_2"> at 1 km grid.</p>
<p>It contains a <code>.tif</code> file along with other metadata.</p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>TIF or TIFF (stands for “Tagged Image File Format”), is a file format used for storing raster images, which are digital images made up of a grid of pixels or dots. They can store images with different color depths, including grayscale, RGB, and CMYK color modes, and can be compressed or uncompressed. They can also include additional metadata such as tags, keywords, and copyright information.</p>
<p>GeoTIFFs are similar to regular TIFF files, but with the added benefit of spatial information embedded in the file itself. This information can include the projection, coordinate system, and other metadata that is essential for accurate georeferencing. Additionally, GeoTIFF files can be used to store multiple bands of data, such as different wavelengths of light from a satellite image, which allows for more complex analysis of the data.</p>
</div>
</div>
</div>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_I/images/europe.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: Europe Air Quality 2020
</figcaption>
</figure>
</div>
<p>To visualize the <code>tif</code> file (<code>no2_avg_20.tif</code>), simply drag &amp; drop to the canvas. Here’s what it looks like (after some styling). As you can see, it’s beautiful &amp; colorful but without context. That’s where our basemap comes in, as you might have expected. You can settle on any that’s appropriate for our use case here. I liked <code>Esri National Geographic</code> for this as it displays the borders of the countries more clearly. And remember, basemaps always come at the bottom. So make sure you reorder them in the <em>Layers</em> widget accordingly.</p>
<p>The default <code>.tif</code> file shows a single band grayscale image. A band is like a channel, much like RGB of a color image. But that looks dull though it has the potential to show much more visual information. We can convert those values into quantiles and visualize those instead. For that, we will now turn our attention to the <code>styling</code> section (shown below).</p>
<p>Once you click it, a new tab opens to the right in place of the <code>processing toolbox</code> area from the figure 3 above.</p>
<div id="fig-styling" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-styling-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-styling" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-a" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-a-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_I/images/styling.jpg" id="fig-a" class="img-fluid figure-img" data-ref-parent="fig-styling">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-a-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a)
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-styling" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-b" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-b-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_I/images/air_quality_styling.jpg" id="fig-b" class="img-fluid figure-img" data-ref-parent="fig-styling">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-b-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b)
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-styling-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Styling
</figcaption>
</figure>
</div>
<p>Make sure that the <code>.tif</code> file is selected and do the following to enhance the visual information (<code>Fig-6(b)</code>):</p>
<ul>
<li><code>1</code> select that to <em>singleband pseudocolor</em> from the dropdown menu</li>
<li><code>2</code> select <code>discrete</code> interpolation</li>
<li><code>3</code> select appropriate color map (<code>spectral</code>/<code>viridis</code> seems better)</li>
<li><code>4</code> choose any reasonable no. of possible classes. The more you choose, the higher the gradients of a particular color and hence not <em>that</em> perceivable to our naked eye beyond a certain limit.</li>
<li><code>5</code> select <em>quantile</em> mode</li>
<li><code>6</code> hit <em>classify</em> to force render the data again.</li>
<li><code>7</code> click <em>transparency</em> to change the opacity level to <code>~40%</code> so as to be able to read the underlying basemap data.</li>
</ul>
<p>Here, we just binned the values of this grayscale image and assigned a color to each bin.</p>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_I/images/europe_aq.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: Layered Map
</figcaption>
</figure>
</div>
<ul>
<li>Notice how the central europe is much more polluted than the rest.</li>
<li>Western Europe is less polluted than its eastern counterpart</li>
<li>As expected, all major capitals, popular cities are relatively very polluted.</li>
</ul>
<p>In a modern industrialized world, a good portion of air pollution is caused by human settlements. To find its effects, we can check where are its majot sites. Headover <a href="https://www.naturalearthdata.com/downloads/10m-cultural-vectors">here</a> and download <em>populated places, urban areas, airports, ports</em> datasets and unzip them. These contain data at 1:10 (i.e., 1cm = 100km) scale.</p>
<p>Drag &amp; drop the <code>ne_10m_urban_areas</code> shapefile layer onto canvas. This shows areas of dense human habitation.</p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>A <code>shapefile</code> is a common file format used to store and exchange geospatial vector data.</p>
</div>
</div>
</div>
<p>You can customize the styling based on your choices and make sure it doesn’t override any of the data shown from the underlying layers. Here’re mine.</p>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_I/images/urban_styling.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: Styling for Urban Areas
</figcaption>
</figure>
</div>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_I/images/urban_areas.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;9: Urban Areas
</figcaption>
</figure>
</div>
<p>Not surprisingly, most parts of urban settlement area is under the region with worse air quality (dark red region)</p>
<p>Let’s now also add the <em>populated places</em> data layer but this time from the commandline with the help of python.</p>
<p>To do that, let’s open the python console from the top menu (<code>plugins -&gt; python console</code> or hit <code>Ctrl+Alt+P</code>). Qgis already makes an instance of its interface available under the variable <code>iface</code>.</p>
<p>To add this vector layer to the canvas, simply run</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replace the filepath accordingly</span></span>
<span id="cb1-2">shapefile_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/&lt;user&gt;/Downloads/ne_10m_populated_places/ne_10m_populated_places.shp'</span></span>
<span id="cb1-3">iface.addVectorLayer(shapefile_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'populated_places'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span></code></pre></div>
<p>You can notice that the layer is then added with the name <code>populated_places</code>. Headover to its styling to choose how those individual data points are represented.</p>
<p>Adding the other layers (i.e., <code>ne_10m_ports</code> &amp; <code>ne_10m_airports</code>) similarly would give us our final result.</p>
<div id="fig-" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://samsaara.github.io/posts/geospatial_intro_part_I/images/final_map_2.jpg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig--caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;10: Final Map with all layers
</figcaption>
</figure>
</div>
<p>There’s so much information to unpack here (open in new tab for higher resolution) that I leave it as an exercise to the reader to derive their own insights.</p>
<p>I hope this has helped you kickstart your journey into GIS analysis and understand our world a bit better. In the next post, we will see how to handle even more types of data, perform a complex processing pipeline and more.</p>
<p>Bis dann 👋</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><a href="https://www.researchgate.net/profile/Asma-Ibraheem/publication/305698432/figure/fig1/AS:388830134849541@1469715737031/Example-of-GIS-Data-Layers-or-Themes-Folger-2009.png">2a</a> and <a href="https://www.weather.gov/images/bmx/GIS/gislayers.jpg">2b</a>↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>EDA</category>
  <category>GIS</category>
  <category>QGIS</category>
  <guid>https://samsaara.github.io/posts/geospatial_intro_part_I/GIS_I.html</guid>
  <pubDate>Sat, 04 Mar 2023 18:30:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/geospatial_intro_part_I/unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Diving into Fastai’s mid-level API with MNIST</title>
  <link>https://samsaara.github.io/posts/mnist-transforms/starter-mnist-with-fast-ai.html</link>
  <description><![CDATA[ 






<p>Welcome back! In this post, we will dive into Fastai’s mid-level API and learn how they help us build custom pipelines &amp; dataloaders with the help of a simple computer vision (CV) example.</p>
<p>The dataset we’ll use is the <code>hello world</code> equivalent of CV called <code>MNIST</code>. Now, there’re various ways to get this data and in fact, fastai provides it as a direct download from its <code>URLs.MNIST</code> attribute but I recently took part in a <a href="https://www.kaggle.com/competitions/digit-recognizer">kaggle competition</a><sup>1</sup> that provided data in an unusual way… one that’s not common enough to load via standard fastai methods. So I thought of making this post to show how that can be done! Let’s go!</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># command to print multiple outputs</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.core.interactiveshell <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> InteractiveShell</span>
<span id="cb1-3">InteractiveShell.ast_node_interactivity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all'</span></span></code></pre></div>
</div>
<section id="load-data" class="level1">
<h1>Load Data</h1>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.imports <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Kaggle setup
</div>
</div>
<div class="callout-body-container callout-body">
<p>Kaggle provides a simple <a href="https://www.kaggle.com/docs/api">API</a> to download (competition) datasets, submit results etc. Simply install it with <code>pip install kaggle</code>. You also need to download an API key fom your kaggle account. It’d download a file called <code>kaggle.json</code> which you can put it under <code>.kaggle</code> (hidden) folder under your home directory, say <code>(~/.kaggle/kaggle.json)</code>.</p>
<p>Once done, run <code>chmod 600 ~/.kaggle/kaggle.json</code> to fix permissions and then download the data with its API &amp; unzip it.</p>
</div>
</div>
<div id="cell-6" class="cell" data-tags="[]" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>rm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>rf data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> kaggle competitions download <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c digit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>recognizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>p data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> unzip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>q data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>digit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>recognizer.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading digit-recognizer.zip to data
 91%|██████████████████████████████████▋   | 14.0M/15.3M [00:01&lt;00:00, 16.1MB/s]
100%|██████████████████████████████████████| 15.3M/15.3M [00:01&lt;00:00, 12.5MB/s]</code></pre>
</div>
</div>
<div id="cell-7" class="cell" data-tags="[]" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>)</span>
<span id="cb5-2">Path.BASE_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path</span>
<span id="cb5-3">path.ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>(#4) [Path('sample_submission.csv'),Path('digit-recognizer.zip'),Path('train.csv'),Path('test.csv')]</code></pre>
</div>
</div>
<div id="cell-8" class="cell" data-tags="[]" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train.csv'</span>)</span>
<span id="cb7-2">train.shape</span>
<span id="cb7-3">train.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>(42000, 785)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">label</th>
<th data-quarto-table-cell-role="th">pixel0</th>
<th data-quarto-table-cell-role="th">pixel1</th>
<th data-quarto-table-cell-role="th">pixel2</th>
<th data-quarto-table-cell-role="th">pixel3</th>
<th data-quarto-table-cell-role="th">pixel4</th>
<th data-quarto-table-cell-role="th">pixel5</th>
<th data-quarto-table-cell-role="th">pixel6</th>
<th data-quarto-table-cell-role="th">pixel7</th>
<th data-quarto-table-cell-role="th">pixel8</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">pixel774</th>
<th data-quarto-table-cell-role="th">pixel775</th>
<th data-quarto-table-cell-role="th">pixel776</th>
<th data-quarto-table-cell-role="th">pixel777</th>
<th data-quarto-table-cell-role="th">pixel778</th>
<th data-quarto-table-cell-role="th">pixel779</th>
<th data-quarto-table-cell-role="th">pixel780</th>
<th data-quarto-table-cell-role="th">pixel781</th>
<th data-quarto-table-cell-role="th">pixel782</th>
<th data-quarto-table-cell-role="th">pixel783</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>

<p>5 rows × 785 columns</p>
</div>
</div>
</div>
<p>As you notice, the training data has <code>785</code> columns: a <code>label</code> column representing what value that is and each value in the rest of the columns representing a pixel. MNIST data, in general, consists of images of size <code>28x28</code>, equivalent to 784 pixels laid out as a plain sheet which is what we have here. Now let’s unravel one to see how it looks like!</p>
<div id="cell-10" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb9-2">row.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>(785,)</code></pre>
</div>
</div>
<div id="cell-11" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">label, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row</span>
<span id="cb11-2">label, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(pixels)</span>
<span id="cb11-3">pixels[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>(1, 784)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</code></pre>
</div>
</div>
<p>So the label says that the image is that of number <code>1</code>. Let’s rearrange the pixels into a square of size <code>28x28</code> array.</p>
<div id="cell-13" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">arr_pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(pixels).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb14-2">arr_pixels[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0,   0, 188, 255,  94,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0,   0, 191, 250, 253,  93,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,   0, 123, 248, 253, 167,  10,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,   0,  80, 247, 253, 208,  13,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,   0,  29, 207, 253, 235,  77,   0,   0,   0,   0,   0,
          0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
          0,   0,  54, 209, 253, 253,  88,   0,   0,   0,   0,   0,   0,
          0,   0]])</code></pre>
</div>
</div>
<p>Hmm… now we see some numbers. Let’s convert that to an image!</p>
<div id="cell-15" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">show_image(arr_pixels)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/mnist-transforms/starter-mnist-with-fast-ai_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Cool! Notice that the image of the label is <code>1</code> as expected. :)</p>
<p>Now, let’s convert all the data into <code>28x28</code> array.</p>
<div id="cell-17" class="cell" data-tags="[]" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshape the data into square images</span></span>
<span id="cb17-2">arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).values.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>).astype(np.uint8)</span>
<span id="cb17-3">arr.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>(42000, 28, 28)</code></pre>
</div>
</div>
<p>Let’s pick a random image to check!</p>
<div id="cell-19" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">show_image(arr[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/mnist-transforms/starter-mnist-with-fast-ai_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="peek-into-mid-level-api" class="level1">
<h1>peek into mid-level API</h1>
<div id="cell-21" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">ImageDataLoaders.from_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>?</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>ImageDataLoaders.from_csv
ImageDataLoaders.from_dblock
ImageDataLoaders.from_df
ImageDataLoaders.from_dsets
ImageDataLoaders.from_folder
ImageDataLoaders.from_lists
ImageDataLoaders.from_name_func
ImageDataLoaders.from_name_re
ImageDataLoaders.from_path_func
ImageDataLoaders.from_path_re</code></pre>
</div>
</div>
<section id="transforms" class="level2">
<h2 class="anchored" data-anchor-id="transforms">Transforms</h2>
<p>The image data is in the form of an array and the labels as a column in a dataframe. I couldn’t find a way to load that using the standard <code>DataBlock</code> API as shown in my face mask detection <a href="../face-mask-detection/facemask_detection.html">post</a> right out of the way we have it (i.e., data not being stored on disk). Perhaps one can convert each row from a <code>784</code> array to a <code>28x28</code> matrix, store it as an image in a column and then load it using one of the <code>ImageDataLoaders</code> methods as shown above. But that sounds a bit more hacky to me compared to the elegant ways <code>Transforms</code> provides.</p>
<p><code>Transform</code> is a class that one can inherit from and it has 3 main methods to implement.</p>
<ul>
<li><code>encodes</code> takes an item and transforms our data into the way we want (our custom transformation)</li>
<li><code>setups</code> is an optional method that sets the inner state, if there’s any</li>
<li><code>decodes</code> which is an optional step too that acts as (near) opposite to <code>encodes</code>. It tries to undo the operations performed in <code>encodes</code>, if and when possible.</li>
</ul>
<p>Here’s a simple example from one of the lessons in fastai:</p>
<div id="cell-23" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> NormalizeMean(Transform):</span>
<span id="cb22-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> setups(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, items): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(items)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(items)</span>
<span id="cb22-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> encodes(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mean</span>
<span id="cb22-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> decodes(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mean</span></code></pre></div>
</div>
<p>Here, <code>setups</code> stores the inner state of the passed items i.e., the <em>mean</em>, <code>encodes</code> returns the data with the mean subtracted and <code>decodes</code> returns the data with the mean added (opposite of <code>encodes</code>).</p>
<div id="cell-25" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize</span></span>
<span id="cb23-2">nm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NormalizeMean()</span>
<span id="cb23-3">nm</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>NormalizeMean:
encodes: (object,object) -&gt; encodes
decodes: (object,object) -&gt; decodes</code></pre>
</div>
</div>
<div id="cell-26" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">nm.setup([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div id="cell-27" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">nm.mean</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>3.0</code></pre>
</div>
</div>
<div id="cell-28" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">nm(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>-1.0</code></pre>
</div>
</div>
<div id="cell-29" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">nm.decode(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>5.0</code></pre>
</div>
</div>
<p>Using this, let’s see how an image can be obtained from an array of pixels! The idea is to pass one row of our training data and get an <code>image</code> &amp; a <code>label</code> in return…</p>
<div id="cell-31" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">train.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">label</th>
<th data-quarto-table-cell-role="th">pixel0</th>
<th data-quarto-table-cell-role="th">pixel1</th>
<th data-quarto-table-cell-role="th">pixel2</th>
<th data-quarto-table-cell-role="th">pixel3</th>
<th data-quarto-table-cell-role="th">pixel4</th>
<th data-quarto-table-cell-role="th">pixel5</th>
<th data-quarto-table-cell-role="th">pixel6</th>
<th data-quarto-table-cell-role="th">pixel7</th>
<th data-quarto-table-cell-role="th">pixel8</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">pixel774</th>
<th data-quarto-table-cell-role="th">pixel775</th>
<th data-quarto-table-cell-role="th">pixel776</th>
<th data-quarto-table-cell-role="th">pixel777</th>
<th data-quarto-table-cell-role="th">pixel778</th>
<th data-quarto-table-cell-role="th">pixel779</th>
<th data-quarto-table-cell-role="th">pixel780</th>
<th data-quarto-table-cell-role="th">pixel781</th>
<th data-quarto-table-cell-role="th">pixel782</th>
<th data-quarto-table-cell-role="th">pixel783</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>

<p>5 rows × 785 columns</p>
</div>
</div>
</div>
<div id="cell-32" class="cell" data-tags="[]" data-execution_count="20">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">xx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:].values.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>).astype(np.uint8)</span>
<span id="cb33-2">xx.shape</span>
<span id="cb33-3">show_image(xx)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/mnist-transforms/starter-mnist-with-fast-ai_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Let’s write the same as a transform that can run on all the datapoints.</p>
<div id="cell-34" class="cell" data-tags="[]" data-execution_count="21">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Convert_to_image(Transform):</span>
<span id="cb34-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> encodes(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb34-3">        mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:].reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>).astype(np.uint8)</span>
<span id="cb34-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> PILImage.create(mat)</span></code></pre></div>
</div>
<p>In our case, we don’t need to maintain any inner state, hence the <code>setups</code> method was skipped. Also there’s no need to revert to the original array state (although one can) and therefore the <code>decodes</code> method too was skipped.</p>
<p>Let’s test this by taking a sample row from our training dataset.</p>
<div id="cell-36" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train.values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb35-2">row.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>(785,)</code></pre>
</div>
</div>
<div id="cell-37" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">c2i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Convert_to_image()</span>
<span id="cb37-2">c2i(row)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/mnist-transforms/starter-mnist-with-fast-ai_files/figure-html/cell-24-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Yay! Now we have an image. Let’s also extract the label out of the same data, which is the first value in the array…</p>
<div id="cell-39" class="cell" data-tags="[]" data-execution_count="24">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Extract_label(Transform):</span>
<span id="cb38-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> encodes(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb38-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</div>
<div id="cell-40" class="cell" data-tags="[]" data-execution_count="25">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">el <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Extract_label()</span>
<span id="cb39-2">el(row)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>8</code></pre>
</div>
</div>
<p>Sweet!</p>
</section>
<section id="pipelines" class="level2">
<h2 class="anchored" data-anchor-id="pipelines">Pipelines</h2>
<p>Now in order to construct our dataloaders, we still need to run a few more transformations on our independent &amp; dependent variables such as converting the data to a tensor to take advantage of GPU etc. <code>Pipeline</code> helps us build a list of transformations to run on our data sequentially. Let’s compose two pipelines: one that acts on our dependent data (i.e., images) and another on our independent data (i.e., labels).</p>
<div id="cell-42" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">x_pipe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline([Convert_to_image, ToTensor])</span>
<span id="cb41-2">y_pipe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline([Extract_label, Categorize(vocab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train.label.unique())])</span></code></pre></div>
</div>
<p>For our dependent data, first <code>Convert_to_image</code> was run, which takes a row from the dataframe, extract our pixel array, reshapes, converts that to a matrix and then to an image. Later it was converted to a tensor with a <code>ToTensor</code> built-in transformation.</p>
<p>For our independent data, the label was first extracted as defined in the <code>Extract_label</code> transform above and later converted to a <em>Category</em> that we want to predict using <code>Categorize</code> built-in transformation. The total possible labels that can be predicted was passed to the <code>vocab</code> (stands for <em>vocabulary</em>) parameter.</p>
<p>Now let’s run the pipeline to see what we get!</p>
<div id="cell-44" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">show_image(x_pipe(row))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/mnist-transforms/starter-mnist-with-fast-ai_files/figure-html/cell-28-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-45" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">y_pipe(row)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>TensorCategory(8)</code></pre>
</div>
</div>
<p>Nice! We’re now ready to construct our dataloaders.</p>
</section>
<section id="custom-datasets-dataloaders" class="level2">
<h2 class="anchored" data-anchor-id="custom-datasets-dataloaders">Custom Datasets &amp; DataLoaders</h2>
<p>To construct dataloaders, a <code>Datasets</code> object needs to be created which takes raw data and can apply multiple pipelines in parallel. This wil be used to run our independent &amp; dependent data piplines together. Optionally the parameter <code>splits</code> can be specified using one of the <code>Splitter</code> transforms, in this case a <code>RandomSplitter</code> which returns training &amp; validation indices extracted from our raw dataset.</p>
<p>As we see, most of the functions that’re used regularly in fastai are actually transformations itself. :)</p>
<div id="cell-47" class="cell" data-tags="[]" data-execution_count="29">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomSplitter(valid_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.2</span>)(np.arange(train.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span></code></pre></div>
</div>
<div id="cell-48" class="cell" data-tags="[]" data-execution_count="30">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">dsets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Datasets(train.values, [x_pipe, y_pipe], splits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>splits)</span></code></pre></div>
</div>
<p>with the <code>Datasets</code> object now obtained, we construct <code>DataLoaders</code> object by simply calling <code>.dataloaders</code> on it. Since we are not collecting data from disk, we don’t have to specify the <code>path</code> and can optionally set a <em>batch_size</em> with <code>bs</code>. As these are just <code>28x28</code> images, we can set a bigger batch size.</p>
<div id="cell-50" class="cell" data-tags="[]" data-execution_count="31">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dsets.dataloaders(bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)</span></code></pre></div>
</div>
<div id="cell-51" class="cell" data-tags="[]" data-execution_count="32">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.train.items), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dls.valid.items)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>(33600, 8400)</code></pre>
</div>
</div>
<div id="cell-52" class="cell" data-tags="[]" data-execution_count="33">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">dls.train.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/mnist-transforms/starter-mnist-with-fast-ai_files/figure-html/cell-34-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-53" class="cell" data-tags="[]" data-execution_count="34">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">dls.valid.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/mnist-transforms/starter-mnist-with-fast-ai_files/figure-html/cell-35-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Finally! We have come a long way extracting the raw data from a dataframe to be able to construct a dataloaders object with image as our dependent datablock and category as our indenpendent datablock!</p>
</section>
<section id="train" class="level2">
<h2 class="anchored" data-anchor-id="train">Train</h2>
<p>You can now use this data to train using fastai’s <code>vision_learner</code> method!</p>
<div id="cell-56" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb52-2">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span></code></pre></div>
</div>
<div id="cell-57" class="cell" data-tags="[]" data-execution_count="36">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">learner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy).to_fp16()</span></code></pre></div>
</div>
<div id="cell-58" class="cell" data-tags="[]" data-execution_count="37">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">learner.lr_find()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>SuggestedLRs(valley=0.0020892962347716093)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/mnist-transforms/starter-mnist-with-fast-ai_files/figure-html/cell-38-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-59" class="cell" data-tags="[]" data-execution_count="38">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">learner.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5e-2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.755852</td>
<td>0.339413</td>
<td>0.915119</td>
<td>00:06</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.119606</td>
<td>0.081445</td>
<td>0.981310</td>
<td>00:07</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.092199</td>
<td>0.080963</td>
<td>0.983571</td>
<td>00:07</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.054804</td>
<td>0.051717</td>
<td>0.986905</td>
<td>00:07</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.029896</td>
<td>0.037651</td>
<td>0.991667</td>
<td>00:07</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.015221</td>
<td>0.032806</td>
<td>0.992500</td>
<td>00:07</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>a near 100% accuracy on the validation set 🎉</p>
<div id="cell-61" class="cell" data-tags="[]" data-execution_count="39">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassificationInterpretation.from_learner(learner)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
</div>
<div id="cell-62" class="cell" data-tags="[]" data-execution_count="40">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">interp.plot_confusion_matrix()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/mnist-transforms/starter-mnist-with-fast-ai_files/figure-html/cell-41-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That’s it for today! Fastai’s mid-level API offers much more functionality and we barely scratched the surface. Hope it inspires you to learn further and take advantage of this powerful feature. Head to the <a href="https://docs.fast.ai">docs</a> to learn more. Thanks for reading :)</p>



</section>
</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-digit-recognizer" class="csl-entry">
AstroDave, Will Cukierski. 2012. <span>“Digit Recognizer.”</span> Kaggle. <a href="https://kaggle.com/competitions/digit-recognizer">https://kaggle.com/competitions/digit-recognizer</a>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><span class="citation" data-cites="digit-recognizer">(AstroDave 2012)</span>↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>EDA</category>
  <category>computer vision</category>
  <category>fastai</category>
  <guid>https://samsaara.github.io/posts/mnist-transforms/starter-mnist-with-fast-ai.html</guid>
  <pubDate>Mon, 26 Dec 2022 18:30:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/mnist-transforms/image.png" medium="image" type="image/png" height="148" width="144"/>
</item>
<item>
  <title>Face mask detection with fastai</title>
  <link>https://samsaara.github.io/posts/face-mask-detection/facemask_detection.html</link>
  <description><![CDATA[ 






<p>With COVID-19 mutating and still posing a threat globally, wearing a 😷 is still mandatory in many countries. In this post, we will see how to train a simple computer vision model to detect whether the person is wearing a facemask or not. Let’s start by downloading the appropriate dataset<sup>1</sup> from kaggle.</p>
<p>You can either download it manually from kaggle or use <a href="https://www.kaggle.com/docs/api">its free API</a>. Let’s do the latter.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.imports <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<p>Let’s create a directory called <code>data</code> to store and extract our desired dataset.</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">data_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>)</span>
<span id="cb2-2">data_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)</span>
<span id="cb3-2">path.ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>(#3) [Path('mask.jpg'),Path('facemask_detection.ipynb'),Path('data')]</code></pre>
</div>
</div>
<section id="loading-dataset" class="level1">
<h1>Loading dataset</h1>
<div id="cell-7" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> kaggle</span></code></pre></div>
</div>
<div id="cell-8" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">kaggle.api.dataset_download_files(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ashishjangra27/face-mask-12k-images-dataset'</span>, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>, unzip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="cell-9" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>).ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>(#1) [Path('data/Face Mask Dataset')]</code></pre>
</div>
</div>
<div id="cell-10" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/Face Mask Dataset/'</span>).ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>(#3) [Path('data/Face Mask Dataset/Train'),Path('data/Face Mask Dataset/Validation'),Path('data/Face Mask Dataset/Test')]</code></pre>
</div>
</div>
<div id="cell-11" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/Face Mask Dataset/Train'</span>).ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>(#2) [Path('data/Face Mask Dataset/Train/WithoutMask'),Path('data/Face Mask Dataset/Train/WithMask')]</code></pre>
</div>
</div>
<p>We notice that there’re three folders neatly separated into different datasets with each folder in turn sectioned into images with/without masks. Let’s load them…</p>
</section>
<section id="checking-dataset" class="level1">
<h1>Checking dataset</h1>
<div id="cell-14" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastai.vision.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
</div>
<div id="cell-15" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">ims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/Face Mask Dataset/'</span>)</span>
<span id="cb14-2">ims</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>(#11792) [Path('data/Face Mask Dataset/Train/WithoutMask/1092.png'),Path('data/Face Mask Dataset/Train/WithoutMask/1460.png'),Path('data/Face Mask Dataset/Train/WithoutMask/3881.png'),Path('data/Face Mask Dataset/Train/WithoutMask/982.png'),Path('data/Face Mask Dataset/Train/WithoutMask/2662.png'),Path('data/Face Mask Dataset/Train/WithoutMask/4602.png'),Path('data/Face Mask Dataset/Train/WithoutMask/1106.png'),Path('data/Face Mask Dataset/Train/WithoutMask/5205.png'),Path('data/Face Mask Dataset/Train/WithoutMask/1776.png'),Path('data/Face Mask Dataset/Train/WithoutMask/4309.png')...]</code></pre>
</div>
</div>
<div id="cell-16" class="cell" data-execution_count="75">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">failed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verify_images(ims)</span>
<span id="cb16-2">failed</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="75">
<pre><code>(#0) []</code></pre>
</div>
</div>
<p>As we notice, there’re about <code>~12,000</code> images… and no invalid files. That’s good!</p>
<div id="cell-18" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">ims[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>Path('data/Face Mask Dataset/Train/WithoutMask/1092.png')</code></pre>
</div>
</div>
<div id="cell-19" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_image(ims[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb20-2">im</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-20" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">im.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>(108, 108)</code></pre>
</div>
</div>
<p>After testing a few more images, we can notice that many of them have dimensions below <code>128x128</code>. So, let’s use fastai’s <code>DataBlock</code> &amp; <code>dataloaders</code> to load these images. <code>DataBlock</code> allows us to construct datasets with a lot of flexibility at each step. We’ll see how:</p>
<div id="cell-22" class="cell" data-execution_count="89">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">faces <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataBlock(</span>
<span id="cb23-2">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(ImageBlock, CategoryBlock),</span>
<span id="cb23-3">    get_items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>partial(get_image_files, folders<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Validation'</span>]),</span>
<span id="cb23-4">    get_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>parent_label,</span>
<span id="cb23-5">    splitter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>GrandparentSplitter(train_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train'</span>, valid_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Validation'</span>),</span>
<span id="cb23-6">    item_tfms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>),</span>
<span id="cb23-7">)</span></code></pre></div>
</div>
<p>Let’s deconstruct what we did above:</p>
<ul>
<li><code>blocks</code> tell what kind of datablock we’re building… in this case, we want to do image classification. Hence, we load an image and assign a category to it.</li>
<li><code>get_items</code> tell how &amp; where to look for our files. Since, we’re dealing with images, we use <code>get_image_files</code>. We use <code>partial</code> (from <code>functools</code>) to fix the <em>folders</em> attribute as we don’t want to pick images from <em>test</em> set as well.</li>
<li><code>get_y</code> provides <em>label</em> for our classes. Each image should ideally be labelled <code>WithMask</code> or <code>WithoutMask</code>.</li>
<li><code>splitter</code> helps us split the dataset into <em>training &amp; validation</em> sets by separating images from <code>Train</code> &amp; <code>Validation</code> folders</li>
<li><code>item_tfms</code> are the transformations (or a set of operations) that we perform on each item (in this case, an image) before we bunch them together as a batch. In this case, we are resizing all images to <code>128x128</code>.</li>
</ul>
<p>Now, let’s provide the source path of the images to finally load them with <code>dataloaders</code>.</p>
<div id="cell-24" class="cell" data-execution_count="90">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">dls <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> faces.dataloaders(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/Face Mask Dataset/'</span>, bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span></code></pre></div>
</div>
<div id="cell-25" class="cell" data-execution_count="97">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">dls.train.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can check what classes our data falls under by looking at the <code>.c</code> attribute of our dataloaders object.</p>
<div id="cell-27" class="cell" data-execution_count="154">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">dls.c</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="154">
<pre><code>2</code></pre>
</div>
</div>
<p>and <code>.vocab</code> attribute tells what those classes and their order is!</p>
<div id="cell-29" class="cell" data-execution_count="155">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">dls.vocab</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="155">
<pre><code>['WithMask', 'WithoutMask']</code></pre>
</div>
</div>
<p>Looks good! Now let’s train a model… we can start with a simple one like <code>resnet18</code> and use a more complex one if needed. We track our model’s performance by monitoring its <code>accuracy</code>.</p>
</section>
<section id="training-a-model" class="level1">
<h1>Training a model</h1>
<div id="cell-32" class="cell" data-execution_count="100">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb30-2">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span></code></pre></div>
</div>
<div id="cell-33" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">learner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vision_learner(dls, resnet18, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>accuracy)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>if this is the first time you run the above command, it will download a pre-trained model onto the disk.</p>
</div>
</div>
<div id="cell-35" class="cell" data-execution_count="106">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">learner.lr_find(suggest_funcs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(steep, minimum, valley))</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="106">
<pre><code>SuggestedLRs(steep=0.0003981071640737355, minimum=0.02089296132326126, valley=0.0008317637839354575)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-23-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>using the builtin <em>learning rate</em> finder, it looks like a good value is <code>~5e-3</code>… let’s train the model with that for <code>3</code> epochs!</p>
<div id="cell-37" class="cell" data-execution_count="107">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">learner.fine_tune(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5e-3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.095269</td>
<td>0.025470</td>
<td>0.990000</td>
<td>00:12</td>
</tr>
</tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">epoch</th>
<th data-quarto-table-cell-role="th">train_loss</th>
<th data-quarto-table-cell-role="th">valid_loss</th>
<th data-quarto-table-cell-role="th">accuracy</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.028186</td>
<td>0.016682</td>
<td>0.996250</td>
<td>00:16</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.011198</td>
<td>0.006065</td>
<td>0.997500</td>
<td>00:15</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.002301</td>
<td>0.001746</td>
<td>0.998750</td>
<td>00:15</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Wow! a near <code>100%</code> accuracy! 🎉😍 <em>Fastai</em> always ensures that the metrics are reported on the validation dataset, so that’s a good sign. Let’s see what the model learnt!</p>
<div id="cell-39" class="cell" data-execution_count="108">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">learner.show_results()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-25-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="verifying-results" class="level2">
<h2 class="anchored" data-anchor-id="verifying-results">verifying results</h2>
<div id="cell-41" class="cell" data-execution_count="109">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">interp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ClassificationInterpretation.from_learner(learner)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
</div>
<div id="cell-42" class="cell" data-execution_count="110">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">interp.plot_confusion_matrix()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-27-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Let’s see what the model is getting wrong or is most unsure about by plotting its top losses!</p>
<div id="cell-44" class="cell" data-execution_count="116">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">interp.plot_top_losses(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-28-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We only got one incorrect image &amp; the rest are correct but a bit inconfident (and even that’s low for the 2<sup>nd</sup> row of images).</p>
<section id="image-shifting" class="level3">
<h3 class="anchored" data-anchor-id="image-shifting">Image Shifting</h3>
<p>Let’s do a bit of fun! Sometimes, it’s known that some image recognition models predict completely different classes when even a few pixels are changed… hence let’s see how robust our model is by rotating and wrapping an image and then letting our model predict.</p>
<div id="cell-47" class="cell" data-execution_count="170">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rotate_and_wrap_image(image, percentage<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.4</span>):</span>
<span id="cb39-2">    im <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor(image)</span>
<span id="cb39-3">    val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(im.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> percentage)</span>
<span id="cb39-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.cat((im[:, val:], im[:, :val]), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)    </span></code></pre></div>
</div>
<div id="cell-48" class="cell" data-execution_count="171">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">im.resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="171">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-30-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-49" class="cell" data-execution_count="173">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">show_image(rotate_and_wrap_image(im))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://samsaara.github.io/posts/face-mask-detection/facemask_detection_files/figure-html/cell-31-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-50" class="cell" data-execution_count="174">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">learner.predict(rotate_and_wrap_image(im))</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="174">
<pre><code>('WithoutMask', TensorBase(1), TensorBase([3.2003e-07, 1.0000e+00]))</code></pre>
</div>
</div>
<p>interesting! our model still predicts correct class and this worked on many other tested images as well. This might mean that the model has actually learnt to identify a 😷 and not ‘remember’ the image itself.</p>
</section>
</section>
</section>
<section id="predict-on-test-set" class="level1">
<h1>Predict on test set</h1>
<p>Let’s provide the test images to our model and see how well it predicts!</p>
<div id="cell-53" class="cell" data-execution_count="177">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">test_ims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/Face Mask Dataset/'</span> , folders<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Test'</span>])</span>
<span id="cb44-2">test_ims</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="177">
<pre><code>(#992) [Path('data/Face Mask Dataset/Test/WithoutMask/1940.png'),Path('data/Face Mask Dataset/Test/WithoutMask/1969.png'),Path('data/Face Mask Dataset/Test/WithoutMask/45.png'),Path('data/Face Mask Dataset/Test/WithoutMask/2497.png'),Path('data/Face Mask Dataset/Test/WithoutMask/807.png'),Path('data/Face Mask Dataset/Test/WithoutMask/3830.png'),Path('data/Face Mask Dataset/Test/WithoutMask/972.png'),Path('data/Face Mask Dataset/Test/WithoutMask/3825.png'),Path('data/Face Mask Dataset/Test/WithoutMask/4024.png'),Path('data/Face Mask Dataset/Test/WithoutMask/4178.png')...]</code></pre>
</div>
</div>
<div id="cell-54" class="cell" data-execution_count="178">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">test_dl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learner.dls.test_dl(test_ims)</span></code></pre></div>
</div>
<div id="cell-55" class="cell" data-execution_count="184">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">preds, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learner.get_preds(dl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dl)</span>
<span id="cb47-2">preds.shape</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="184">
<pre><code>torch.Size([992, 2])</code></pre>
</div>
</div>
<div id="cell-56" class="cell" data-execution_count="213">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">preds[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="213">
<pre><code>TensorBase([[4.3606e-05, 9.9996e-01],
            [3.7663e-07, 1.0000e+00],
            [2.5526e-06, 1.0000e+00],
            [3.0737e-10, 1.0000e+00],
            [1.1245e-08, 1.0000e+00]])</code></pre>
</div>
</div>
<p>We got probabilities… we need to somehow use them to compare with the actual labels. First, let’s get the actual labels.</p>
<p>We know from the <code>.vocab</code> attribute that class <em>0</em> with <code>WithMask</code> and <em>1</em> is <code>WithoutMask</code>. So let’s extract the label from each test image based on which folder it’s coming from.</p>
<div id="cell-58" class="cell" data-execution_count="214">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">test_ims[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="214">
<pre><code>Path('data/Face Mask Dataset/Test/WithoutMask/1940.png')</code></pre>
</div>
</div>
<div id="cell-59" class="cell" data-execution_count="220">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">test_ims[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].parent</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="220">
<pre><code>Path('data/Face Mask Dataset/Test/WithoutMask')</code></pre>
</div>
</div>
<div id="cell-60" class="cell" data-execution_count="221">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">test_ims[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].parent.stem</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="221">
<pre><code>'WithoutMask'</code></pre>
</div>
</div>
<div id="cell-61" class="cell" data-execution_count="207">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_ims.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (x.parent.stem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'WithoutMask'</span>))</span>
<span id="cb57-2">targets</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="207">
<pre><code>(#992) [1,1,1,1,1,1,1,1,1,1...]</code></pre>
</div>
</div>
<div id="cell-62" class="cell" data-execution_count="209">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">preds.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).shape, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(targets)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="209">
<pre><code>(torch.Size([992]), 992)</code></pre>
</div>
</div>
<p>Now we compare our predictions with the targets and take the average like so:</p>
<div id="cell-64" class="cell" data-execution_count="212">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">(preds.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> tensor(targets)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="212">
<pre><code>TensorBase(0.9990)</code></pre>
</div>
</div>
<p>Sweet! 💗</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>We now know how to train a simple computer vision model to detect facemasks! However, we can’t completely generalize and say that our model can be used in the actual real world! There are pitfalls and it is always important to understand the limitations of our models.</p>
<p>Always look at where the data is coming from. In this case, it is a bunch of google images and celebrity faces. All the images are cropped around the face. So our model might not predict well when given an unclipped full image of a person with/without a mask. It would still predict one of the two classes even when we submit a completely different image, say a 🦒. Also the image quality it was trained on is around <code>128x128</code> pixels, which is rather low.</p>
<p>We will possibly see how to address these issues in another post covering another dataset! Until then, 👋</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>https://www.kaggle.com/datasets/ashishjangra27/face-mask-12k-images-dataset↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>EDA</category>
  <category>computer vision</category>
  <category>fastai</category>
  <guid>https://samsaara.github.io/posts/face-mask-detection/facemask_detection.html</guid>
  <pubDate>Mon, 19 Dec 2022 18:30:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/face-mask-detection/mask.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>fastai env setup</title>
  <link>https://samsaara.github.io/posts/fastai-env-setup/</link>
  <description><![CDATA[ 






<p>It’s been quite a while since I last dabbled myself in deep learning and therefore decided to revisit from the basics. And what better way than to start doing that than learning from <a href="https://course.fast.ai/">fastai</a>? :D In this post, we will see how to quickly setup your dev environment for running notebooks locally to put your hard earned GPUs to use :p</p>
<p>Of course, you can run your notebooks on cloud with free GPU support on platforms such as <em><a href="https://colab.research.google.com/">Google Colab</a></em>, <em><a href="https://www.paperspace.com/gradient/notebooks">Paperspace Gradient</a></em> or even <em><a href="https://www.kaggle.com/docs/notebooks">kaggle notebooks</a></em> but sometimes, it feels good to run things locally without worrying too much about quotas or network issues etc. If you’re starting new in this field, it’s highly recommended to try the above platforms first.</p>
<p>Firstly, you need <a href="https://anaconda.org/conda-forge/mamba">mamba</a>. Use it wherever you use <code>conda</code> because it’s much faster. Once you install it, run the following script:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a conda environment</span></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> fastai python=3.10</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install suitable version of `pytorch-cuda` at your time of installation</span></span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install pytorch torchvision torchaudio pytorch-cuda=11.7 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> pytorch <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install fastai</span></span>
<span id="cb1-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> fastchan fastai</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> conda-forge jupyterlab ipywidgets</span></code></pre></div>
<p>Make sure you can use GPU with pytorch by running this in your python session:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> torch.cuda.is_available()</span></code></pre></div>
<p>That’s it. Now you can run fastai with GPU support locally simply by doing <code>mamba activate fastai</code> and launching <em>jupyter</em> ! 💚</p>



 ]]></description>
  <category>setup</category>
  <category>fastai</category>
  <guid>https://samsaara.github.io/posts/fastai-env-setup/</guid>
  <pubDate>Sun, 18 Dec 2022 18:30:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/fastai-env-setup/dev_setup.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Migrating from Fastpages to Quarto</title>
  <link>https://samsaara.github.io/posts/migrate-to-quarto/</link>
  <description><![CDATA[ 






<p><a href="https://fastpages.fast.ai">Fastpages</a>, based on which my original blog was <a href="../../posts/fastpages-blog-setup/fastpages-blog-setup.html">setup</a> has been archived and they now recommend using <a href="https://quarto.org">Quarto</a> instead. If you’re starting new, the latter is the recommended way to go but if you too have a fastpages blog setup initially and want to migrate, there’s a <a href="https://nbdev.fast.ai/tutorials/blogging.html#migrating-from-fastpages">migration guide</a> available. It’s not completely perfect as you have to tweak a few bits here &amp; there before you see all the renderings correctly (because of slight syntactic variations amongst other things).</p>
<p>However, I felt quarto to be much more intuitive and easy to setup. I also did the migration but found manually moving posts from my old blog repo to the new quarto repo to be a bit easier. (Migration worked but I was not happy with the directories it created as part of it… I found it aesthetically less pleasing and hence moved them myself).</p>
<p>For simple blogging, fastpages offered more than enough features and quarto offers even more on top of that. It’s easy to get started with quarto. Head over to the <a href="https://quarto.org/docs/guide/">start guide</a> to learn more.</p>
<p>I do miss the advanced styling options I setup in <em>fastpages</em> though… will have to dig into Quarto to see how much I can reuse. Until then, have fun with my frugalistic looking blog! :D</p>



 ]]></description>
  <category>meta</category>
  <guid>https://samsaara.github.io/posts/migrate-to-quarto/</guid>
  <pubDate>Sat, 17 Dec 2022 18:30:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/migrate-to-quarto/data-migration.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Supercharge your data processing with DuckDB</title>
  <link>https://samsaara.github.io/posts/duckdb-tutorial/duckdb-tutorial.html</link>
  <description><![CDATA[ 






<p>Do you have large datasets that you simply can not load into memory to analyse with Pandas? Or do you feel more comfortable expressing operations in SQL instead of python?</p>
<p>Fret not, for you have <code>DuckDB</code> now! ✨🦆✨</p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Most of us data scientists are familiar with Pandas, the de-facto data processing library in Python. It’s simple, powerful, able to handle a myriad data formats &amp; sizes and for the most part, very intuitive. And people familiar with SQL as well know how powerful it too is in its ability to handle complex data transformations with a concise syntax. But sometimes, you have to trade off execution speeds in favor of intuitivity/expressiveness or vice versa. This especially becomes painful when you either have large (OOM) datasets or need to perform complex data wrangling on your data. At times, it makes more sense to handle that in SQL rather than in Pandas.</p>
<p>DuckDB aims to bring these together with a fast &amp; efficient SQL query execution engine that can run complex queries on large sets of data. It integrates tightly with Pandas DataFrames and allows us to run these queries directly on top of them without needing to take data in &amp; out of it.</p>
<p>In this tutorial, we shall see how we can leverage DuckDB in various analytical workloads.</p>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>DuckDB is very lightweight and has <strong><em>no external dependencies</em></strong> and runs <em>within</em> the host process itself. Simply install it with:</p>
<pre><code>pip install duckdb==0.3.4</code></pre>
<p>To initialize it, run:</p>
<div id="cell-8" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:33:34.991241Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:34.436037Z&quot;}}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb2-2">dbcon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>()</span></code></pre></div>
</div>
<p>That’s it! Now you can test it by running:</p>
<div id="cell-10" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:33:36.016219Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:35.992090Z&quot;}}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">dbcon.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select 1, 2, 3'</span>).fetchall()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>[(1, 2, 3)]</code></pre>
</div>
</div>
<p>Next step is to run <code>pip install pyarrow</code> to add support for reading/writing <em>parquet</em> data.</p>
<section id="jupyter-notebook-setup" class="level3">
<h3 class="anchored" data-anchor-id="jupyter-notebook-setup">Jupyter Notebook setup</h3>
<p>If in case you wish to explore it in Jupyter Notebooks, install a few additional libraries for a better experience:</p>
<pre><code>pip install ipython-sql SQLAlchemy duckdb-engine</code></pre>
<p>Import them once installed:</p>
<div id="cell-13" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:33:40.106943Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:36.943288Z&quot;}}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlalchemy</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext sql</span></code></pre></div>
</div>
<p>Set a few config options to prettify the output and return it as Pandas DataFrame</p>
<div id="cell-15" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:33:40.130019Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:40.109333Z&quot;}}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>config SqlMagic.autopandas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb7-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>config SqlMagic.feedback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb7-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>config SqlMagic.displaycon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span></code></pre></div>
</div>
<p>DuckDB is primarily designed to be an in-memory DB. You can however persist your data to disk.</p>
<div id="cell-17" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:33:40.405754Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:40.132674Z&quot;}}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>sql duckdb:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">///</span>:memory:</span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># %sql duckdb:///path/to/file.db</span></span></code></pre></div>
</div>
<div id="cell-18" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:33:41.343052Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:41.318366Z&quot;}}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-output</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we can also access the current config &amp; settings of DuckDB by running the following:</span></span>
<span id="cb9-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>sql SELECT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> FROM duckdb_settings()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">name</th>
<th data-quarto-table-cell-role="th">value</th>
<th data-quarto-table-cell-role="th">description</th>
<th data-quarto-table-cell-role="th">input_type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>access_mode</td>
<td>automatic</td>
<td>Access mode of the database (AUTOMATIC, READ_O...</td>
<td>VARCHAR</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>checkpoint_threshold</td>
<td>16.7MB</td>
<td>The WAL size threshold at which to automatical...</td>
<td>VARCHAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>debug_checkpoint_abort</td>
<td>NULL</td>
<td>DEBUG SETTING: trigger an abort while checkpoi...</td>
<td>VARCHAR</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>debug_force_external</td>
<td>False</td>
<td>DEBUG SETTING: force out-of-core computation f...</td>
<td>BOOLEAN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>debug_many_free_list_blocks</td>
<td>False</td>
<td>DEBUG SETTING: add additional blocks to the fr...</td>
<td>BOOLEAN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>debug_window_mode</td>
<td>NULL</td>
<td>DEBUG SETTING: switch window mode to use</td>
<td>VARCHAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>default_collation</td>
<td></td>
<td>The collation setting used when none is specified</td>
<td>VARCHAR</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>default_order</td>
<td>asc</td>
<td>The order type used when none is specified (AS...</td>
<td>VARCHAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>default_null_order</td>
<td>nulls_first</td>
<td>Null ordering used when none is specified (NUL...</td>
<td>VARCHAR</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>disabled_optimizers</td>
<td></td>
<td>DEBUG SETTING: disable a specific set of optim...</td>
<td>VARCHAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>enable_external_access</td>
<td>True</td>
<td>Allow the database to access external state (t...</td>
<td>BOOLEAN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>enable_object_cache</td>
<td>False</td>
<td>Whether or not object cache is used to cache e...</td>
<td>BOOLEAN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>enable_profiling</td>
<td>NULL</td>
<td>Enables profiling, and sets the output format ...</td>
<td>VARCHAR</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>enable_progress_bar</td>
<td>False</td>
<td>Enables the progress bar, printing progress to...</td>
<td>BOOLEAN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>explain_output</td>
<td>physical_only</td>
<td>Output of EXPLAIN statements (ALL, OPTIMIZED_O...</td>
<td>VARCHAR</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>force_compression</td>
<td>NULL</td>
<td>DEBUG SETTING: forces a specific compression m...</td>
<td>VARCHAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>log_query_path</td>
<td>NULL</td>
<td>Specifies the path to which queries should be ...</td>
<td>VARCHAR</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>max_memory</td>
<td>26.9GB</td>
<td>The maximum memory of the system (e.g. 1GB)</td>
<td>VARCHAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>memory_limit</td>
<td>26.9GB</td>
<td>The maximum memory of the system (e.g. 1GB)</td>
<td>VARCHAR</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>null_order</td>
<td>nulls_first</td>
<td>Null ordering used when none is specified (NUL...</td>
<td>VARCHAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">20</td>
<td>perfect_ht_threshold</td>
<td>12</td>
<td>Threshold in bytes for when to use a perfect h...</td>
<td>BIGINT</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">21</td>
<td>preserve_identifier_case</td>
<td>True</td>
<td>Whether or not to preserve the identifier case...</td>
<td>BOOLEAN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">22</td>
<td>profiler_history_size</td>
<td>NULL</td>
<td>Sets the profiler history size</td>
<td>BIGINT</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">23</td>
<td>profile_output</td>
<td></td>
<td>The file to which profile output should be sav...</td>
<td>VARCHAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">24</td>
<td>profiling_mode</td>
<td>NULL</td>
<td>The profiling mode (STANDARD or DETAILED)</td>
<td>VARCHAR</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">25</td>
<td>profiling_output</td>
<td></td>
<td>The file to which profile output should be sav...</td>
<td>VARCHAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26</td>
<td>progress_bar_time</td>
<td>2000</td>
<td>Sets the time (in milliseconds) how long a que...</td>
<td>BIGINT</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">27</td>
<td>schema</td>
<td></td>
<td>Sets the default search schema. Equivalent to ...</td>
<td>VARCHAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">28</td>
<td>search_path</td>
<td></td>
<td>Sets the default search search path as a comma...</td>
<td>VARCHAR</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">29</td>
<td>temp_directory</td>
<td>.tmp</td>
<td>Set the directory to which to write temp files</td>
<td>VARCHAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">30</td>
<td>threads</td>
<td>12</td>
<td>The number of total threads used by the system.</td>
<td>BIGINT</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">31</td>
<td>wal_autocheckpoint</td>
<td>16.7MB</td>
<td>The WAL size threshold at which to automatical...</td>
<td>VARCHAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">32</td>
<td>worker_threads</td>
<td>12</td>
<td>The number of total threads used by the system.</td>
<td>BIGINT</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">33</td>
<td>binary_as_string</td>
<td></td>
<td>In Parquet files, interpret binary data as a s...</td>
<td>BOOLEAN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">34</td>
<td>Calendar</td>
<td>gregorian</td>
<td>The current calendar</td>
<td>VARCHAR</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">35</td>
<td>TimeZone</td>
<td>Europe/Berlin</td>
<td>The current time zone</td>
<td>VARCHAR</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>From now on, you can run SQL directly by prefixing <code>%sql</code> (or <code>%%sql</code> for multiline statements) to your code cell and get your output returned as pandas dataframe :man_dancing:.</p>
<div id="cell-20" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:33:43.949965Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:43.936516Z&quot;}}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>sql select <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">a</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="duckdb-vs-traditional-databases" class="level2">
<h2 class="anchored" data-anchor-id="duckdb-vs-traditional-databases">DuckDB vs traditional Databases</h2>
<p>With <code>pandas.read_sql</code> command, one can already run SQL queries on an existing DB connection, read tables and load data as pandas DataFrames in memory for processing in python. While this is fine for lightweight operations, it is not optimized for heavy data processing. Traditional RDBMSs such as Postgres, MySQL, etc. process each row sequentially which apart from taking long time to execute, also induce a lot of overhead on CPU. DuckDB on the other hand is built with <a href="https://en.wikipedia.org/wiki/Online_analytical_processing">OLAP</a> in mind and is <em>Column-Vectorized</em>. This helps massively parallelize disk I/O and query executions.</p>
<blockquote class="blockquote">
<p>DuckDB uses the Postgres SQL parser under the hood, and offers many of the same SQL features as Postgres <sup>1</sup></p>
</blockquote>
</section>
</section>
<section id="accessing-dataframes-with-duckdb" class="level1">
<h1>Accessing DataFrames with DuckDB</h1>
<p>One of the major limitations of Pandas is that it’s <em>single threaded</em>. Hence we can’t take advantage of the multi-core CPUs which every computer ships with these days. DuckDB <strong><em>supports multi-threading</em></strong> natively and hence can take advantage of all the cores of your CPU.</p>
<blockquote class="blockquote">
<p>There exist a few some external libraries that enable parallel processing but only on specific operations.</p>
</blockquote>
<p>While this is turned on by default, we also can explicitly set the number of threads:</p>
<div id="cell-24" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:33:45.545681Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:45.487404Z&quot;}}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-output</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify no. of threads for multi-threading support</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dbcon.execute("PRAGMA threads=32");</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># you can also set this up with the `%sql` line magic</span></span>
<span id="cb11-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>sql SET THREADS to <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
</tbody>
</table>

</div>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>When using free tier of Google Colab, please set it only to <code>2</code> to avoid crashing the kernel instead.</p>
</div>
</div>
<p>We can also write a short snippet to run an SQL query, and return the result as a Pandas DataFrame in a pythonic way:</p>
<div id="cell-27" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:33:48.373995Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:48.367971Z&quot;}}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dbrun(query: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.DataFrame:</span>
<span id="cb12-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""run the query with duckdb"""</span></span>
<span id="cb12-3"></span>
<span id="cb12-4">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dbcon.query(query).to_df()</span>
<span id="cb12-5"></span>
<span id="cb12-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># you can also use `fetch` instead</span></span>
<span id="cb12-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># result = dbcon.execute(query).fetch_df()</span></span>
<span id="cb12-8"></span>
<span id="cb12-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or just simply `.df()`</span></span>
<span id="cb12-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># result = dbcon.execute(query).df()</span></span>
<span id="cb12-11"></span>
<span id="cb12-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span></code></pre></div>
</div>
<p>Now create a DataFrame &amp; run a simple query:</p>
<div id="cell-29" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:33:48.708828Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:48.647014Z&quot;}}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>])</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># querying with python function</span></span>
<span id="cb13-4">first_half_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dbrun(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT *</span></span>
<span id="cb13-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM df</span></span>
<span id="cb13-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    WHERE a &lt; 5</span></span>
<span id="cb13-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
</div>
<p>Alternatively, you can also compute the result with the line magics and store the result as a python variable that you can access elsewhere:</p>
<div id="cell-31" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:33:55.512332Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:33:55.481003Z&quot;}}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-output</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>sql</span>
<span id="cb14-4"></span>
<span id="cb14-5">second_half_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> </span>
<span id="cb14-6">SELECT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb14-7">FROM df</span>
<span id="cb14-8">WHERE a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Returning data to local variable second_half_df</code></pre>
</div>
</div>
<p>Notice that we didn’t declare <code>df</code> as a view, nor did we create any table. DuckDB simply looks for any python variable that was declared before if the table name doesn’t exist.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Sometimes, you override a dataframe by performing an operation &amp; assign it to the same variable. For e.g., <code>df = df.query(...)</code>. If in case, you see that the duckdb’s <code>df</code> is still not updated, you can (always) ‘register’ the dataframe explicitly as <code>dbcon.register("df", df);</code></p>
</div>
</div>
</section>
<section id="accessing-files-with-duckdb" class="level1">
<h1>Accessing files with DuckDB</h1>
<p>Often times we have data stored either in DB or in <code>parquet/csv</code> formats and they could be huge or may not/barely fit in memory. Loading them with pandas incur significant memory overhead and also possibly <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/scale.html">creates multiple copies</a> when performing certain operations. With DuckDB, such files can be queried directly without any copying because of <a href="https://arrow.apache.org/blog/2021/12/03/arrow-duckdb/">direct integration with Apache Arrow</a>.</p>
<p>To demonstrate this, we’ll download an <a href="https://www.kaggle.com/datasets/yuanyuwendymu/airline-delay-and-cancellation-data-2009-2018">airline delay &amp; cancelation dataset from kaggle</a> (and place it under <code>data/airline_data/</code> folder). The compressed archive is about <code>~2GB</code> and when deflated, creates a couple of CSVs totalling <code>~8GB</code> of data.</p>
<p>Let’s have a quick look at the contents by loading a single csv file:</p>
<div id="cell-36" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:34:01.175371Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:34:00.924914Z&quot;}}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>sql</span>
<span id="cb16-2"></span>
<span id="cb16-3">select <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb16-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data/airline_data/2009.csv'</span></span>
<span id="cb16-5">limit <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">FL_DATE</th>
<th data-quarto-table-cell-role="th">OP_CARRIER</th>
<th data-quarto-table-cell-role="th">OP_CARRIER_FL_NUM</th>
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">DEST</th>
<th data-quarto-table-cell-role="th">CRS_DEP_TIME</th>
<th data-quarto-table-cell-role="th">DEP_TIME</th>
<th data-quarto-table-cell-role="th">DEP_DELAY</th>
<th data-quarto-table-cell-role="th">TAXI_OUT</th>
<th data-quarto-table-cell-role="th">WHEELS_OFF</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">CRS_ELAPSED_TIME</th>
<th data-quarto-table-cell-role="th">ACTUAL_ELAPSED_TIME</th>
<th data-quarto-table-cell-role="th">AIR_TIME</th>
<th data-quarto-table-cell-role="th">DISTANCE</th>
<th data-quarto-table-cell-role="th">CARRIER_DELAY</th>
<th data-quarto-table-cell-role="th">WEATHER_DELAY</th>
<th data-quarto-table-cell-role="th">NAS_DELAY</th>
<th data-quarto-table-cell-role="th">SECURITY_DELAY</th>
<th data-quarto-table-cell-role="th">LATE_AIRCRAFT_DELAY</th>
<th data-quarto-table-cell-role="th">Unnamed: 27</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2009-01-01</td>
<td>XE</td>
<td>1204</td>
<td>DCA</td>
<td>EWR</td>
<td>1100</td>
<td>1058.0</td>
<td>-2.0</td>
<td>18.0</td>
<td>1116.0</td>
<td>...</td>
<td>62.0</td>
<td>68.0</td>
<td>42.0</td>
<td>199.0</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2009-01-01</td>
<td>XE</td>
<td>1206</td>
<td>EWR</td>
<td>IAD</td>
<td>1510</td>
<td>1509.0</td>
<td>-1.0</td>
<td>28.0</td>
<td>1537.0</td>
<td>...</td>
<td>82.0</td>
<td>75.0</td>
<td>43.0</td>
<td>213.0</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2009-01-01</td>
<td>XE</td>
<td>1207</td>
<td>EWR</td>
<td>DCA</td>
<td>1100</td>
<td>1059.0</td>
<td>-1.0</td>
<td>20.0</td>
<td>1119.0</td>
<td>...</td>
<td>70.0</td>
<td>62.0</td>
<td>36.0</td>
<td>199.0</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2009-01-01</td>
<td>XE</td>
<td>1208</td>
<td>DCA</td>
<td>EWR</td>
<td>1240</td>
<td>1249.0</td>
<td>9.0</td>
<td>10.0</td>
<td>1259.0</td>
<td>...</td>
<td>77.0</td>
<td>56.0</td>
<td>37.0</td>
<td>199.0</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2009-01-01</td>
<td>XE</td>
<td>1209</td>
<td>IAD</td>
<td>EWR</td>
<td>1715</td>
<td>1705.0</td>
<td>-10.0</td>
<td>24.0</td>
<td>1729.0</td>
<td>...</td>
<td>105.0</td>
<td>77.0</td>
<td>40.0</td>
<td>213.0</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
</tbody>
</table>

<p>5 rows × 28 columns</p>
</div>
</div>
</div>
<p>we can load efficiently with pandas too by specifying the <code>nrows</code> parameter:</p>
<div id="cell-38" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:34:05.133414Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:34:05.097132Z&quot;}}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data/airline_data/2009.csv'</span>, nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">FL_DATE</th>
<th data-quarto-table-cell-role="th">OP_CARRIER</th>
<th data-quarto-table-cell-role="th">OP_CARRIER_FL_NUM</th>
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">DEST</th>
<th data-quarto-table-cell-role="th">CRS_DEP_TIME</th>
<th data-quarto-table-cell-role="th">DEP_TIME</th>
<th data-quarto-table-cell-role="th">DEP_DELAY</th>
<th data-quarto-table-cell-role="th">TAXI_OUT</th>
<th data-quarto-table-cell-role="th">WHEELS_OFF</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">CRS_ELAPSED_TIME</th>
<th data-quarto-table-cell-role="th">ACTUAL_ELAPSED_TIME</th>
<th data-quarto-table-cell-role="th">AIR_TIME</th>
<th data-quarto-table-cell-role="th">DISTANCE</th>
<th data-quarto-table-cell-role="th">CARRIER_DELAY</th>
<th data-quarto-table-cell-role="th">WEATHER_DELAY</th>
<th data-quarto-table-cell-role="th">NAS_DELAY</th>
<th data-quarto-table-cell-role="th">SECURITY_DELAY</th>
<th data-quarto-table-cell-role="th">LATE_AIRCRAFT_DELAY</th>
<th data-quarto-table-cell-role="th">Unnamed: 27</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2009-01-01</td>
<td>XE</td>
<td>1204</td>
<td>DCA</td>
<td>EWR</td>
<td>1100</td>
<td>1058.0</td>
<td>-2.0</td>
<td>18.0</td>
<td>1116.0</td>
<td>...</td>
<td>62.0</td>
<td>68.0</td>
<td>42.0</td>
<td>199.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2009-01-01</td>
<td>XE</td>
<td>1206</td>
<td>EWR</td>
<td>IAD</td>
<td>1510</td>
<td>1509.0</td>
<td>-1.0</td>
<td>28.0</td>
<td>1537.0</td>
<td>...</td>
<td>82.0</td>
<td>75.0</td>
<td>43.0</td>
<td>213.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2009-01-01</td>
<td>XE</td>
<td>1207</td>
<td>EWR</td>
<td>DCA</td>
<td>1100</td>
<td>1059.0</td>
<td>-1.0</td>
<td>20.0</td>
<td>1119.0</td>
<td>...</td>
<td>70.0</td>
<td>62.0</td>
<td>36.0</td>
<td>199.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2009-01-01</td>
<td>XE</td>
<td>1208</td>
<td>DCA</td>
<td>EWR</td>
<td>1240</td>
<td>1249.0</td>
<td>9.0</td>
<td>10.0</td>
<td>1259.0</td>
<td>...</td>
<td>77.0</td>
<td>56.0</td>
<td>37.0</td>
<td>199.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2009-01-01</td>
<td>XE</td>
<td>1209</td>
<td>IAD</td>
<td>EWR</td>
<td>1715</td>
<td>1705.0</td>
<td>-10.0</td>
<td>24.0</td>
<td>1729.0</td>
<td>...</td>
<td>105.0</td>
<td>77.0</td>
<td>40.0</td>
<td>213.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

<p>5 rows × 28 columns</p>
</div>
</div>
</div>
<p>While the first operation with DuckDB took <code>~250ms</code>, the second one above took only <code>~50ms</code>. It’s possibly because such operations are optimized in pandas and also for computing simple metrics across rows (such as mean, min, max etc.), pandas can make use of highly optimized numpy routines under the hood. But, as we’ll see later, these would only go so far.</p>
<p>To load all these CSVs into one dataframe with pandas is very inefficient and takes a lot of time. And it’ll most likely fail if your computer doesn’t have a beefy RAM. If you still gotta do it, you’d have to iterate through all CSVs and concatenate like so:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> glob <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb18-2">csvs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/airline_data/*.csv'</span>)</span>
<span id="cb18-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(pd.read_csv(csv) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> csv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csvs)</span></code></pre></div>
<p>A better alternative would be to merge all those CSVs into a single parquet file. Unlike CSVs, parquet files are structured and as such are unambiguous to read.<sup>2</sup> They are compressed columnar files and hence take much less space than individual CSVs combined because of the efficient Arrow data format.</p>
<div id="cell-40" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>sql copy <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/airline_data/*.csv'</span> to <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/airline_data/data.parquet'</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>61556964</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Notice that we directly copied all the CSVs using regex to a single parquet file without ever copying data into pandas. Now, we ended up from a 7.5GB combined CSV files to a 2.5GB parquet file which now easily fits into memory. So we can load it with pandas as:</p>
<div id="cell-42" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:34:38.545606Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:34:17.672753Z&quot;}}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/airline_data/data.parquet'</span>)</span>
<span id="cb20-2">df.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>(61556964, 28)</code></pre>
</div>
</div>
<p>Because of the efficient parquet format, we could load the entire <em>61 Million</em> rows of data in mere seconds.</p>
<section id="projection-filter-pushdowns" class="level2">
<h2 class="anchored" data-anchor-id="projection-filter-pushdowns">Projection &amp; Filter Pushdowns</h2>
<p>Now let’s do a simple filter operation on our dataset. Let’s count the total number of rows that satisfy the condition <code>TAXI_OUT &gt; 10</code>. We’ll try with both pandas &amp; duckdb.</p>
<div id="cell-45" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:34:54.249748Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:34:44.719959Z&quot;}}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TAXI_OUT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>(45209245, 28)</code></pre>
</div>
</div>
<div id="cell-46" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:34:54.499992Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:34:54.252243Z&quot;}}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>sql</span>
<span id="cb24-2"></span>
<span id="cb24-3">select count(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> count</span>
<span id="cb24-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> df</span>
<span id="cb24-5">where TAXI_OUT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>45209245</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>While the earlier operation took <code>~9.5s</code>, the latter just took <strong>~250ms</strong> :zap:. <em>There’s just no comparison.</em></p>
<p>This is because duckdb automatically optimizes the query by selecting only the required column(s) (aka <code>projection pushdown</code>) and then applies the filtering to get a subset of data (aka <code>filter pushdown</code>). Pandas instead reads through all the columns. We can optimize this in pandas by doing these pushdowns ourselves.</p>
<div id="cell-48" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:35:13.066902Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:35:12.209341Z&quot;}}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">projection_pushdown_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TAXI_OUT'</span>]]</span>
<span id="cb25-2">filter_pushdown_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> projection_pushdown_df[projection_pushdown_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TAXI_OUT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb25-3">filter_pushdown_df.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>(45209245, 1)</code></pre>
</div>
</div>
<p>We managed to bring this down from several seconds to almost a second. But using duckdb is still about <code>70-90%</code> faster than this.</p>
</section>
<section id="using-groupby" class="level2">
<h2 class="anchored" data-anchor-id="using-groupby">Using Groupby</h2>
<p>Now let’s calculate a few aggregates using <code>groupby</code> with projection &amp; filter pushdowns combined.</p>
<p>Here, we compute a few simple metrics with a certain airline carrier grouped by two origin &amp; destination airports and finally sort the results by the origin airport.</p>
<div id="cell-51" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:45:43.525554Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:45:36.613608Z&quot;}}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">projection_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ORIGIN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEST'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TAXI_OUT'</span>, </span>
<span id="cb27-2">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR_TIME'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DISTANCE'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OP_CARRIER'</span>]]</span>
<span id="cb27-3">origin_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> projection_df[</span>
<span id="cb27-4">    (projection_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ORIGIN'</span>].isin((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DCA'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EWR'</span>))) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span></span>
<span id="cb27-5">    (projection_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEST'</span>].isin((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DCA'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EWR'</span>))) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span></span>
<span id="cb27-6">    (projection_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OP_CARRIER'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'XE'</span>)]</span>
<span id="cb27-7">(origin_df</span>
<span id="cb27-8">     .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ORIGIN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEST'</span>])</span>
<span id="cb27-9">     .agg(</span>
<span id="cb27-10">         avg_taxi_out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TAXI_OUT'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>),</span>
<span id="cb27-11">         max_air_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR_TIME'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>),</span>
<span id="cb27-12">         total_distance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DISTANCE'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>))</span>
<span id="cb27-13">     .sort_index(level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb27-14">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">avg_taxi_out</th>
<th data-quarto-table-cell-role="th">max_air_time</th>
<th data-quarto-table-cell-role="th">total_distance</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">DEST</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">DCA</td>
<td data-quarto-table-cell-role="th">EWR</td>
<td>22.116009</td>
<td>87.0</td>
<td>828835.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">EWR</td>
<td data-quarto-table-cell-role="th">DCA</td>
<td>23.675481</td>
<td>93.0</td>
<td>831024.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We can make it a bit more concise by using <code>.query</code> for filtering pushdown.</p>
<div id="cell-53" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:46:08.269756Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:46:04.842405Z&quot;}}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">(df</span>
<span id="cb28-2"> .query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OP_CARRIER == "XE" and ORIGIN in ("DCA", "EWR") and DEST in ("DCA", "EWR")'</span>)</span>
<span id="cb28-3"> .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ORIGIN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEST'</span>])</span>
<span id="cb28-4"> .agg(</span>
<span id="cb28-5">     avg_taxi_out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TAXI_OUT'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>),</span>
<span id="cb28-6">     max_air_time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR_TIME'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>),</span>
<span id="cb28-7">     total_distance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DISTANCE'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>))</span>
<span id="cb28-8">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">avg_taxi_out</th>
<th data-quarto-table-cell-role="th">max_air_time</th>
<th data-quarto-table-cell-role="th">total_distance</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">DEST</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">DCA</td>
<td data-quarto-table-cell-role="th">EWR</td>
<td>22.116009</td>
<td>87.0</td>
<td>828835.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">EWR</td>
<td data-quarto-table-cell-role="th">DCA</td>
<td>23.675481</td>
<td>93.0</td>
<td>831024.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>This approach took only about half the time (~3s) compared to our earlier one because&nbsp;<code>.query</code> uses a modified syntax of python and also indexing thus resulting in more efficient evaluation. We can now compare that to our SQL counterpart…</p>
<div id="cell-55" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;ExecuteTime&quot;,&quot;value&quot;:{&quot;end_time&quot;:&quot;2022-05-27T19:47:12.947960Z&quot;,&quot;start_time&quot;:&quot;2022-05-27T19:47:12.518760Z&quot;}}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>sql</span>
<span id="cb29-2"></span>
<span id="cb29-3">select</span>
<span id="cb29-4">    ORIGIN,</span>
<span id="cb29-5">    DEST,</span>
<span id="cb29-6">    AVG(TAXI_OUT) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> avg_taxi_out,</span>
<span id="cb29-7">    MAX(AIR_TIME) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> max_air_time,</span>
<span id="cb29-8">    SUM(DISTANCE) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> total_distance</span>
<span id="cb29-9"></span>
<span id="cb29-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> df</span>
<span id="cb29-11"></span>
<span id="cb29-12">where</span>
<span id="cb29-13">    OP_CARRIER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'XE'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span></span>
<span id="cb29-14">    ORIGIN <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DCA'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EWR'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span></span>
<span id="cb29-15">    DEST <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DCA'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EWR'</span>)</span>
<span id="cb29-16">    </span>
<span id="cb29-17">group by ORIGIN, DEST</span>
<span id="cb29-18">order by ORIGIN</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">DEST</th>
<th data-quarto-table-cell-role="th">avg_taxi_out</th>
<th data-quarto-table-cell-role="th">max_air_time</th>
<th data-quarto-table-cell-role="th">total_distance</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>DCA</td>
<td>EWR</td>
<td>22.116009</td>
<td>87.0</td>
<td>828835.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>EWR</td>
<td>DCA</td>
<td>23.675481</td>
<td>93.0</td>
<td>831024.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>This ~400ms execution with duckdb above is around an <strong><em>order of magnitude faster</em></strong> and also a lot cleaner, I’d say. :wink:</p>
<p>Notice that the data is already loaded under <code>df</code> and hence we don’t need to read from the source parquet file.</p>
<blockquote class="blockquote">
<p>In the same way, we can also improve the performance of our queries <em>drastically</em> when using <strong><em>joins</em></strong> across multiple tables. I leave this as an exercise to the reader.</p>
</blockquote>
<p><em>But why actually load data into memory in the first place when we can process it more efficiently with it being just on disk?</em> Often times, the data is too big to load into memory anyways.</p>
<p>To do that, we just need to create a <code>VIEW</code> to our data which lets us query the table directly without loading onto memory and update the source from the dataframe <code>df</code> to the newly created view instead.<sup>3</sup></p>
</section>
</section>
<section id="accessing-data-with-views" class="level1">
<h1>Accessing data with <code>Views</code></h1>
<div id="cell-58" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>sql</span>
<span id="cb30-2"></span>
<span id="cb30-3">create view airlinedata <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> select <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/airline_data/data.parquet'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-4"></span>
<span id="cb30-5">select</span>
<span id="cb30-6">    ORIGIN,</span>
<span id="cb30-7">    DEST,</span>
<span id="cb30-8">    AVG(TAXI_OUT) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> avg_taxi_out,</span>
<span id="cb30-9">    MAX(AIR_TIME) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> max_air_time,</span>
<span id="cb30-10">    SUM(DISTANCE) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> total_distance</span>
<span id="cb30-11"></span>
<span id="cb30-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airlinedata</span>
<span id="cb30-13"></span>
<span id="cb30-14">where</span>
<span id="cb30-15">    OP_CARRIER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'XE'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span></span>
<span id="cb30-16">    ORIGIN <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DCA'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EWR'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span></span>
<span id="cb30-17">    DEST <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DCA'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'EWR'</span>)</span>
<span id="cb30-18"></span>
<span id="cb30-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span> you can also use `ALL` instead of each column</span>
<span id="cb30-20">group by ALL</span>
<span id="cb30-21">order by ORIGIN</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">DEST</th>
<th data-quarto-table-cell-role="th">avg_taxi_out</th>
<th data-quarto-table-cell-role="th">max_air_time</th>
<th data-quarto-table-cell-role="th">total_distance</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>DCA</td>
<td>EWR</td>
<td>22.116009</td>
<td>87.0</td>
<td>828835.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>EWR</td>
<td>DCA</td>
<td>23.675481</td>
<td>93.0</td>
<td>831024.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>This is such a powerful feature and allows us to explore <em>lot</em> more data than traditionally possible with pandas.</p>
<p>We can also check the datatypes and other metadata with <code>describe view/table name</code></p>
<div id="cell-60" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-output</span></span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>sql describe airlinedata</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">column_name</th>
<th data-quarto-table-cell-role="th">column_type</th>
<th data-quarto-table-cell-role="th">null</th>
<th data-quarto-table-cell-role="th">key</th>
<th data-quarto-table-cell-role="th">default</th>
<th data-quarto-table-cell-role="th">extra</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>FL_DATE</td>
<td>DATE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>OP_CARRIER</td>
<td>VARCHAR</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>OP_CARRIER_FL_NUM</td>
<td>INTEGER</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>ORIGIN</td>
<td>VARCHAR</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>DEST</td>
<td>VARCHAR</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>CRS_DEP_TIME</td>
<td>INTEGER</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>DEP_TIME</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>DEP_DELAY</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>TAXI_OUT</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>WHEELS_OFF</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>WHEELS_ON</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>TAXI_IN</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>CRS_ARR_TIME</td>
<td>INTEGER</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>ARR_TIME</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>ARR_DELAY</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>CANCELLED</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>CANCELLATION_CODE</td>
<td>VARCHAR</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>DIVERTED</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>CRS_ELAPSED_TIME</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>ACTUAL_ELAPSED_TIME</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">20</td>
<td>AIR_TIME</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">21</td>
<td>DISTANCE</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">22</td>
<td>CARRIER_DELAY</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">23</td>
<td>WEATHER_DELAY</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">24</td>
<td>NAS_DELAY</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">25</td>
<td>SECURITY_DELAY</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26</td>
<td>LATE_AIRCRAFT_DELAY</td>
<td>DOUBLE</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">27</td>
<td>Unnamed: 27</td>
<td>VARCHAR</td>
<td>YES</td>
<td>None</td>
<td>None</td>
<td>None</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<section id="using-approximations" class="level2">
<h2 class="anchored" data-anchor-id="using-approximations">Using approximations</h2>
<p>At times, it suffices just to get an estimate of certain data rather than a precise answer. Using approximations would help us to just that.</p>
<div id="cell-62" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>sql</span>
<span id="cb32-2"></span>
<span id="cb32-3">select</span>
<span id="cb32-4">    OP_CARRIER,</span>
<span id="cb32-5">    approx_count_distinct(DEST) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> approx_num_unique_destinations</span>
<span id="cb32-6"></span>
<span id="cb32-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airlinedata</span>
<span id="cb32-8"></span>
<span id="cb32-9">group by <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb32-10">order by <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb32-11"></span>
<span id="cb32-12">limit <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">OP_CARRIER</th>
<th data-quarto-table-cell-role="th">approx_num_unique_destinations</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>9E</td>
<td>186</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>AA</td>
<td>116</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>AS</td>
<td>77</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>B6</td>
<td>73</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>CO</td>
<td>85</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>DL</td>
<td>171</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>EV</td>
<td>205</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>F9</td>
<td>130</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>FL</td>
<td>75</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>G4</td>
<td>126</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-63" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>sql</span>
<span id="cb33-2"></span>
<span id="cb33-3">select</span>
<span id="cb33-4">    OP_CARRIER,</span>
<span id="cb33-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span> takes more time to compute</span>
<span id="cb33-6">    count(distinct DEST) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> num_unique_destinations</span>
<span id="cb33-7"></span>
<span id="cb33-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airlinedata</span>
<span id="cb33-9"></span>
<span id="cb33-10">group by <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb33-11">order by <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb33-12"></span>
<span id="cb33-13">limit <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">OP_CARRIER</th>
<th data-quarto-table-cell-role="th">num_unique_destinations</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>9E</td>
<td>185</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>AA</td>
<td>116</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>AS</td>
<td>77</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>B6</td>
<td>73</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>CO</td>
<td>85</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>DL</td>
<td>170</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>EV</td>
<td>205</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>F9</td>
<td>129</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>FL</td>
<td>75</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>G4</td>
<td>126</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Our approximation query earlier ran about 3-4 times faster than the precise one in this case. This is crucial when responsiveness is more important than precision (esp.&nbsp;for larger datasets).</p>
</section>
<section id="using-window-functions" class="level2">
<h2 class="anchored" data-anchor-id="using-window-functions">Using Window functions</h2>
<p>Finally, let’s wrap our analysis by showing off a bit more of what duckdb can do using some advanced SQL operations.</p>
<p>We create two CTEs (Common Table Expressions) to calculate a couple of features. We do filter &amp; projection pushdowns in one CTE and compute our desired features in another. The first feature is a simple demo to showcase <code>if-else</code> support. The second feature is a bit advanced where we find out the last destination a given air carrier has flown to, sorted by flying date. And when it doesn’t exist, replace it with <code>NA</code>. We then take a sample from the final resultant set.</p>
<div id="cell-66" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>sql</span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> limited_data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> (</span>
<span id="cb34-4">    select </span>
<span id="cb34-5">        FL_DATE,</span>
<span id="cb34-6">        ORIGIN, </span>
<span id="cb34-7">        DEST, </span>
<span id="cb34-8">        DISTANCE,</span>
<span id="cb34-9">        OP_CARRIER,</span>
<span id="cb34-10">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airlinedata</span>
<span id="cb34-11">    where FL_DATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2015-01-01'</span>    </span>
<span id="cb34-12">),</span>
<span id="cb34-13"></span>
<span id="cb34-14">last_destination_data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> (</span>
<span id="cb34-15">    select <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb34-16">        case</span>
<span id="cb34-17">            when DISTANCE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.60934</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span> then <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span></span>
<span id="cb34-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span></span>
<span id="cb34-19">        end <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> distance_more_than_500_km,</span>
<span id="cb34-20"></span>
<span id="cb34-21">        coalesce(last_value(DEST) over (</span>
<span id="cb34-22">            partition by OP_CARRIER</span>
<span id="cb34-23">            order by FL_DATE</span>
<span id="cb34-24">            rows between unbounded preceding <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> preceding</span>
<span id="cb34-25">        ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> last_destination_flown_with_this_carrier</span>
<span id="cb34-26"></span>
<span id="cb34-27">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> limited_data</span>
<span id="cb34-28">)</span>
<span id="cb34-29"></span>
<span id="cb34-30">select <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb34-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> last_destination_data</span>
<span id="cb34-32">using sample <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">FL_DATE</th>
<th data-quarto-table-cell-role="th">ORIGIN</th>
<th data-quarto-table-cell-role="th">DEST</th>
<th data-quarto-table-cell-role="th">DISTANCE</th>
<th data-quarto-table-cell-role="th">OP_CARRIER</th>
<th data-quarto-table-cell-role="th">distance_more_than_500_km</th>
<th data-quarto-table-cell-role="th">last_destination_flown_with_this_carrier</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2018-07-10</td>
<td>DCA</td>
<td>LGA</td>
<td>214.0</td>
<td>YX</td>
<td>no</td>
<td>DCA</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2015-05-08</td>
<td>DAL</td>
<td>BWI</td>
<td>1209.0</td>
<td>WN</td>
<td>yes</td>
<td>BWI</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2018-03-30</td>
<td>LAS</td>
<td>SJC</td>
<td>386.0</td>
<td>WN</td>
<td>yes</td>
<td>SJC</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2015-07-10</td>
<td>BOS</td>
<td>MSP</td>
<td>1124.0</td>
<td>DL</td>
<td>yes</td>
<td>DTW</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2016-06-01</td>
<td>DTW</td>
<td>BWI</td>
<td>409.0</td>
<td>DL</td>
<td>yes</td>
<td>DTW</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>2017-07-26</td>
<td>GEG</td>
<td>MSP</td>
<td>1175.0</td>
<td>DL</td>
<td>yes</td>
<td>SAN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>2017-01-10</td>
<td>DFW</td>
<td>ACT</td>
<td>89.0</td>
<td>EV</td>
<td>no</td>
<td>DFW</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>2015-01-01</td>
<td>PHX</td>
<td>DRO</td>
<td>351.0</td>
<td>OO</td>
<td>yes</td>
<td>BFL</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>2018-05-06</td>
<td>DFW</td>
<td>MCO</td>
<td>985.0</td>
<td>AA</td>
<td>yes</td>
<td>IAH</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>2018-04-30</td>
<td>MSY</td>
<td>LAX</td>
<td>1670.0</td>
<td>WN</td>
<td>yes</td>
<td>LAX</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Nice, isn’t it?! The same operation is unimaginably complex (for me, at least) in pandas. 🤯</p>
<p>With DuckDB, we can combine one or more of many of such complex operations and execute in one go without worrying much about manual optimizations.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>We have noticed how performant DuckDB is and how it brings the whole SQL ecosystem into Pandas. Its simple installation and light footprint means that we can integrate this into our existing workflows with minimal effort and achieve maximum gains in terms of execution speeds&nbsp;. We can also continue using pandas on larger datasets without loading them into memory or jumping onto a full blown distributed computing setup (<em>for a reasonable extent</em>).</p>
<p>Thanks so much for reading this far :heart:. Now you know most of the important stuff about DuckDB to get yourself started. Bear in mind that we hardly scratched the surface. DuckDB offers so much more. You can use correlated subqueries, nested types, etc. apart from its many <a href="https://duckdb.org/2022/05/04/friendlier-sql.html">user friendly features</a> such as column aliasing in <code>group by/having</code>, auto-incrementing duplicate columns, better string slicing and so on. Their <a href="https://duckdb.org/docs/">documentation</a> is very clean &amp; beginner friendly and the <a href="https://duckdb.org/news/">blog</a> has very informative posts as well. I encourage you to check those out.</p>
<section id="sidenote" class="level3">
<h3 class="anchored" data-anchor-id="sidenote">Sidenote</h3>
<ul>
<li><a href="https://modin.org/">Modin</a> tries to parallellize pandas workflow by distributing the workload to multiple CPU cores. <a href="https://www.kdnuggets.com/2019/11/speed-up-pandas-4x.html">Have a look</a> and am guessing that we can also combine modin &amp; DuckDB for an even faster runtimes.</li>
<li><a href="https://github.com/fugue-project/fugue">Fugue</a> is a new framework that provides a unified interface so that users can execute their Python, Pandas, and SQL code on various distributed computing platforms such as Spark and Dask without rewrites. Please check <a href="https://towardsdatascience.com/introducing-fugue-reducing-pyspark-developer-friction-a702230455de">here</a> for a nice introduction from its maintainer Kevin and also checkout <a href="https://towardsdatascience.com/fugue-and-duckdb-fast-sql-code-in-python-e2e2dfc0f8eb">this</a> article from Khuyen to get a feel of using it with DuckDB.</li>
</ul>
<p>I hope you have enjoyed this post and learnt something from it. Please let me know your thoughts/suggestions (or any mistakes) in the comments below. :)</p>
<p>Happy Ducking! 💚🦆💚</p>
</section>
</section>
<section id="footnotes" class="level1">
<h1>Footnotes</h1>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><a href="https://duckdb.org/2021/05/14/sql-on-pandas.html">SQL on Pandas with duckdb</a>↩︎</p></li>
<li id="fn2"><p><a href="https://duckdb.org/docs/archive/0.2.8/data/parquet">duckdb on parquet</a>↩︎</p></li>
<li id="fn3"><p>The exact execution times might vary a bit depending on the load &amp; build of your computer. I also noticed that the operations are cached and the first computation takes a bit of time but running it again or after changing the values of the columns in the <code>WHERE</code> clause would only take a couple of <code>ms</code> later on.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>EDA</category>
  <category>pandas</category>
  <category>SQL</category>
  <guid>https://samsaara.github.io/posts/duckdb-tutorial/duckdb-tutorial.html</guid>
  <pubDate>Thu, 26 May 2022 18:30:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/duckdb-tutorial/duck.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Setting up your blog with Fastpages</title>
  <link>https://samsaara.github.io/posts/fastpages-blog-setup/fastpages-blog-setup.html</link>
  <description><![CDATA[ 






<p>After going through a bit of an intensive setup, I thought of writing up my journey &amp; difficulties I faced while setting up this blog so that it could help others who might start later. <i class="fa-solid fa-person-hiking" aria-label="person-hiking"></i></p>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>I was looking for ways to have my tiny little place on the internet &amp; therefore scouted for feasible options. As a Data Scientist, I interact with code regularly and (Jupyter) Notebooks are part of our DNA :stuck_out_tongue:. So the criteria that I had set for myself was that whatever platform I choose, it has to be (a) very code friendly, (b) easy to maintain, and (c) relatively affordable (if possible, even free).</p>
<section id="quest-for-the-right-tool" class="level3">
<h3 class="anchored" data-anchor-id="quest-for-the-right-tool">Quest for the right tool</h3>
<p>I’m a big fan of <a href="https://www.notion.so/">Notion</a> and use it for almost everything in my private life. So I initially considered setting up my blog with <a href="https://super.so/">Super</a> as you can create websites straight away from Notion pages. Though it looks great, the pricing is something that I’m still not comfortable with (yet).</p>
<p>Then there’s <a href="https://medium.com/">Medium</a>, which provides a nice writing experience but only as long as you don’t have much code in your content. Though affordable, just like Super, it has mediocre support for code formatting natively &amp; you have to optimize your content well ahead with a lot of GitHub gists. It also has no out-of-the-box support for mathematical symbols/equations. Read more about its shortcomings from a developer perspective in a great post from Prasanth Rao <a href="https://prrao87.github.io/blog/blogging-for-data-scientists">here</a>.Though, I might still consider using this service to post once in a while to increase my outreach. We’ll see how it goes. <i class="fa-solid fa-face-smile" aria-label="face-smile"></i></p>
<blockquote class="blockquote">
<p>These first two options are great if you don’t write code-heavy posts (that often) and are also very beginner friendly. But unfortunately, both of them are not free and also don’t fit well for my use case. Besides, where’s the fun if you don’t build stuff by tweaking stuff? :wink:</p>
</blockquote>
<p>I then decided to give <a href="https://pages.github.com">GitHub Pages</a> a try since it’s a free static site generator service from GitHub. One need not know (much) about HTML/CSS and can simply write content in human readable <code>Markdown</code> format which gets rendered as a webpage. Besides, you get a nice revision history of your blog as everything would be version controlled with GitHub. In combination with <a href="https://jekyllrb.com">Jekyll</a> (that powers Github pages), there’re numerous <a href="http://jekyllthemes.io">themes &amp; templates</a> to choose from and so much customization that can be made via styles, CSS, etc. I can easily convert Jupyter notebooks into markdown scripts and have them rendered with Jekyll. Since one can display code snippets, markdown cells, and embed 3<sup>rd</sup> party content within Jupyter notebooks, I intended to go with this as it fulfilled most of my needs… <em>until I rediscovered <a href="https://fastpages.fast.ai">Fastpages</a></em>.</p>
<p>Fastpages, from <a href="https://fast.ai/">fast.ai</a>, turbocharges Jupyter notebooks by automating the process of creating blog posts from notebooks via Github Actions. We can write content in <em>notebooks markdown files, or <u>even Word</u> documents</em> and have them rendered as a web page. It offers so much more functionality on-top like code folding, interactive plots on a static web page via embeddings, comments &amp; emoji support :heart_eyes_cat:, etc. For an excellent introduction, please refer to the <a href="https://github.com/fastai/fastpages">official documentation</a>.</p>
<p>That has convinced me &amp; so now you’re reading this site built with Fastpages. 🎉</p>
</section>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>Fortunately, <a href="https://github.com/fastai/fastpages#welcome-to-fastpages">Fastpages</a> is very well documented and it is highly recommended that you go through that first. However, you might still encounter some problems because of some outdated documentation, and if in case you want to test it locally on Linux systems, which is what I cover here. So, without further ado, let’s dive in.</p>
<ol type="1">
<li>Think of a name for your blog. It can just be <code>blog</code> like mine.</li>
<li>Go through the setup instructions detailed <a href="https://github.com/fastai/fastpages#setup-instructions">here</a>.
<ol type="1">
<li>It might happen that once after you try to generate a copy as per the instructions above, a PR won’t be automatically generated. The debug instructions in the README are a bit outdated. In this case, go to the <code>Settings -&gt; Actions -&gt; General</code> section of your newly created blog repository and ensure that you have <code>Read and write permissions</code> enabled and the last checkbox is ✔️ like :point_down:. Hit <code>Save</code>. <img src="https://samsaara.github.io/posts/fastpages-blog-setup/actions_debug.png" class="img-fluid"></li>
<li>Go to the <code>Actions</code> tab and you might see a failed section. Ignore what it is for now and click that failed one. Most likely it’d be a <code>Setup</code> workflow failure. On the top right, from the drop-down menu <code>Re-run jobs</code>, select <code>Re-run failed jobs</code>.</li>
<li>Once the above steps are all ✅, go to the <code>Pull Requests</code> tab and wait for some time. Your first PR would soon be automatically created. You can also optionally check the progress under the <code>Actions</code> tab if desired.</li>
<li>Now follow the instructions in the PR and merge it.</li>
</ol></li>
<li>Congratulations :confetti_ball:. Your blog would soon be up &amp; running at <code>{your-username}.github.io/{repo-name}</code>. Now you can make changes directly on GitHub online or create notebook/markdown/Word files locally and simply upload them as per the instructions into the right folder. Your blog would be updated just like that (in a few minutes). 🪄</li>
</ol>
<section id="test-locally" class="level3">
<h3 class="anchored" data-anchor-id="test-locally">Test Locally</h3>
<p>In most of the cases, you might want to check how your post looks like before you publish to make sure it looks as you intend it to be, especially when it contains data from different sources or in different formats. This is when having the option of testing it locally comes in handy. With Fastpages, you can run your blog locally to see how it would look like so that you can fix any nitty gritty details before pushing it online.</p>
<p>Fastpages again provides a <a href="https://github.com/fastai/fastpages/blob/master/_fastpages_docs/DEVELOPMENT.md">good documentation</a> on how to test it locally with the help of Docker <i class="fa-brands fa-docker" aria-label="docker"></i>. It has worked fine on my Mac <i class="fa-solid fa-laptop" aria-label="laptop"></i> but installing/upgrading Docker on Linux <i class="fa-brands fa-linux" aria-label="linux"></i> is still nowhere as smooth as on Mac and hence I had to go through a bit of digging into forums to make it work on my Ubuntu <i class="fa-brands fa-fa-ubuntu" aria-label="fa-ubuntu"></i> machine especially on the latest version <strong>22.04 LTS</strong>. So, going forward I’d cover only this scenario.</p>
<div class="callout-info">
<p>For Mac/Windows, all you need is Docker installed and simply run <font color="teal">make server</font> from the root level of the repo.</p>
</div>
<ol type="1">
<li>Docker Desktop for Linux (DD4L) is still in beta and is only available for <code>21.XX</code> versions of Ubuntu. So if you have that, go ahead with the setup below. If not, skip to the next step.
<ol type="1">
<li>Follow the Docker installation instructions from the <a href="https://docs.docker.com/desktop/linux/">official documentation</a>.</li>
<li>If you had installed Docker via <code>Snap</code> or you had a previous preview version of Docker Desktop installed, it’s recommended to uninstall them completely. See more <a href="https://askubuntu.com/questions/935569/how-to-completely-uninstall-docker">here</a> for help on how to do that.</li>
</ol></li>
<li>Since Ubuntu <strong>22.04 LTS</strong> is not yet supported, I ended up installing <i class="fa-brands fa-docker" aria-label="docker"></i> (not Docker Desktop) from <a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-22-04">here</a>.</li>
<li>Check if you have <code>docker-compose</code> installed by doing <code>which docker-compose</code> or <code>docker-compose -v</code>. If not, install it as a <a href="https://docs.docker.com/compose/install/#install-compose-as-standalone-binary-on-linux-systems">standalone binary</a>.
<ol type="1">
<li>I’m not sure if it also installs <code>Make</code> but if it doesn’t, please install it too following the instructions <a href="https://www.linuxfordevices.com/tutorials/install-cmake-on-linux">here</a>.</li>
</ol></li>
<li>Run <code>make server</code> from the top level of your repository.
<ol type="1">
<li>Your Jupyter server would be available shortly at <code>http://localhost:8080/tree</code> and it would take a bit of time for your blog to be available under <code>http://localhost:4000/{your-repo-name}</code>. Be patient. :relieved:</li>
</ol></li>
</ol>
<div class="callout-info">
<p>if <font color="teal">make server</font> doesn’t work because of permission issues, try <font color="teal"><b>sudo</b> make server</font> instead</p>
</div>
<hr>
<p>Congratulations once again! :tada: You now have a local version of your blog running. You can create new posts and have them rendered almost instantly :sparkles:. Once you’re happy with the content &amp; format, you can push it (preferably in a new branch and making a PR so that your <em>main/master</em> branch is unaffected). If you feel a bit adventurous, try customizing your blog more to your liking by changing fonts/styles, etc.</p>
<p>If you like this blog’s customization, checkout its <i class="fa-brands fa-github" aria-label="github"></i> <a href="https://github.com/samsaara/blog">repo</a> esp.&nbsp;its <code>custom-style.scss</code>. May be I’ll write another post detailing it.</p>
<p>Good Luck &amp; Happy Blogging! ❤️</p>


</section>
</section>

 ]]></description>
  <category>meta</category>
  <guid>https://samsaara.github.io/posts/fastpages-blog-setup/fastpages-blog-setup.html</guid>
  <pubDate>Sun, 08 May 2022 18:30:00 GMT</pubDate>
  <media:content url="https://samsaara.github.io/posts/fastpages-blog-setup/fastpages_diagram.png" medium="image" type="image/png" height="41" width="144"/>
</item>
</channel>
</rss>
